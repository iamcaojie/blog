---------------------------------------------------------------
[ 2019-02-25T12:47:32+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.672180s] [吞吐率：1.49req/s] [内存消耗：2,693.20kb] [文件加载：50]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=1|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cate',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.370201s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.126669s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.026887s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.002342s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001041s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T12:47:33+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.090487s] [吞吐率：11.05req/s] [内存消耗：2,525.32kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=1|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cate',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002151s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.040682s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000649s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000760s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000547s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T12:47:59+08:00 ] 127.0.0.1 GET localhost/login
[运行时间：0.129960s] [吞吐率：7.69req/s] [内存消耗：1,328.49kb] [文件加载：38]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\login\controller\Index->index[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T12:47:59+08:00 ] 127.0.0.1 GET localhost/admin
[运行时间：0.251670s] [吞吐率：3.97req/s] [内存消耗：2,571.05kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Index->index[ D:\server\nginx\html\phpapp\application\admin\controller\Index.php ]
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/admin\view\admin\admin.html [ array (
  0 => 'catelist',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002448s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.054755s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.009936s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001982s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.002207s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001533s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000632s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T12:47:59+08:00 ] 127.0.0.1 GET localhost/a
[运行时间：0.048718s] [吞吐率：20.53req/s] [内存消耗：1,141.11kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'a',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'image/webp,image/apng,image/*,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T12:48:00+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.246960s] [吞吐率：4.05req/s] [内存消耗：2,773.63kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001168s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.077740s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000452s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000815s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000501s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000937s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000896s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000437s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000430s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000871s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000739s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000449s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000864s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000972s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000549s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000825s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000633s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000486s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000474s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T12:48:00+08:00 ] 127.0.0.1 GET localhost/admin/massage/getmassagelist?page=1&limit=10
[运行时间：0.096712s] [吞吐率：10.34req/s] [内存消耗：2,147.98kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'massage',
    2 => 'getmassagelist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Massage->getMassageList[ D:\server\nginx\html\phpapp\application\admin\controller\Massage.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001108s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_massage` [ RunTime:0.021392s ]
[ sql ] [ SQL ] SELECT * FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.014637s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.017237s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T12:48:00+08:00 ] 127.0.0.1 GET localhost/admin/comments/getcommentslist?page=1&limit=10
[运行时间：0.116434s] [吞吐率：8.59req/s] [内存消耗：2,147.08kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'comments',
    2 => 'getcommentslist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Comments->getCommentsList[ D:\server\nginx\html\phpapp\application\admin\controller\Comments.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001018s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.051289s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.019836s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000534s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T12:48:00+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.184897s] [吞吐率：5.41req/s] [内存消耗：2,773.63kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001502s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.020859s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000431s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000887s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000642s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001652s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000677s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000780s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000701s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001321s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000707s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000708s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001829s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.086098s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000469s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000361s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000530s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000468s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000358s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T12:49:08+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.100635s] [吞吐率：9.94req/s] [内存消耗：2,525.32kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cate',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001868s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.035610s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.026706s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000793s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000658s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T12:54:02+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.389165s] [吞吐率：2.57req/s] [内存消耗：2,525.70kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cate',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.015814s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.062416s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.011718s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000790s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000525s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T12:54:04+08:00 ] 127.0.0.1 GET localhost/blog/python
[运行时间：0.047944s] [吞吐率：20.86req/s] [内存消耗：1,145.14kb] [文件加载：36]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'python',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T12:54:05+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.101465s] [吞吐率：9.86req/s] [内存消耗：2,525.32kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cate',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.026098s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.021813s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000749s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000734s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000687s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T12:54:31+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.138313s] [吞吐率：7.23req/s] [内存消耗：2,693.83kb] [文件加载：50]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cate',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.029692s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.052358s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000506s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001108s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000438s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T12:54:32+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.126155s] [吞吐率：7.93req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001753s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.018289s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000808s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000951s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000747s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001344s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000495s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000458s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000865s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000663s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.001347s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000839s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000367s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000436s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000536s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T12:54:33+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.051682s] [吞吐率：19.35req/s] [内存消耗：2,525.57kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cate',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002335s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001156s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000488s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000806s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000502s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T12:54:35+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.054725s] [吞吐率：18.27req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001041s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001388s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000822s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000409s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000462s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000880s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000529s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000506s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000784s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000698s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000567s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000715s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000620s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000412s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000475s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T12:54:37+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.058187s] [吞吐率：17.19req/s] [内存消耗：2,525.57kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cate',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001017s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000946s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000467s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000711s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000616s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T12:57:16+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.201995s] [吞吐率：4.95req/s] [内存消耗：2,717.45kb] [文件加载：54]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.031397s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.034920s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.029097s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001255s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000605s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ error ] [8]未定义变量: cate[D:\server\nginx\html\phpapp\runtime\temp\d08e27f7d4a620e966ec1fbecd213880.php:39]
---------------------------------------------------------------
[ 2019-02-25T12:57:27+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.128300s] [吞吐率：7.79req/s] [内存消耗：2,693.84kb] [文件加载：50]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.004860s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.075925s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000532s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000768s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000471s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T12:58:28+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.120807s] [吞吐率：8.28req/s] [内存消耗：2,694.33kb] [文件加载：50]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001081s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.057275s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.019500s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001412s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000648s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T12:59:01+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.121229s] [吞吐率：8.25req/s] [内存消耗：2,694.34kb] [文件加载：50]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002379s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.062993s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.008758s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000782s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000449s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T12:59:14+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.167460s] [吞吐率：5.97req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.004058s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.050141s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.019258s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000494s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000560s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.020625s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000683s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000551s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001021s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000871s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.001065s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000817s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000505s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000495s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000864s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T12:59:16+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.051315s] [吞吐率：19.49req/s] [内存消耗：2,525.66kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001005s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000830s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000490s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000784s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000820s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T12:59:17+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.076789s] [吞吐率：13.02req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001081s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001759s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.002210s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.001036s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000471s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000807s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000776s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000451s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000800s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.003514s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000592s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000988s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000929s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000458s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000558s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T12:59:18+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.077957s] [吞吐率：12.83req/s] [内存消耗：2,525.66kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002192s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000799s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000397s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000644s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.029933s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T12:59:18+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.121218s] [吞吐率：8.25req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002427s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.004281s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000787s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.001003s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000949s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000779s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000908s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000943s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.025680s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.023021s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000559s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000530s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000598s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000597s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000532s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T12:59:19+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.045406s] [吞吐率：22.02req/s] [内存消耗：2,525.66kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001511s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000788s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000497s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000709s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000505s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T12:59:20+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.085689s] [吞吐率：11.67req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.010274s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001793s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000538s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000460s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.001443s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000916s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000510s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000476s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000829s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000722s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000560s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000468s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000393s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.002520s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000963s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T12:59:21+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.047907s] [吞吐率：20.87req/s] [内存消耗：2,525.66kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001012s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000799s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000521s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000751s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000542s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:01:54+08:00 ] 127.0.0.1 GET localhost/blog/javascript
[运行时间：0.028291s] [吞吐率：35.35req/s] [内存消耗：1,145.19kb] [文件加载：36]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'javascript',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T13:01:56+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.106985s] [吞吐率：9.35req/s] [内存消耗：2,525.66kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002184s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.034722s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.007222s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000810s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000527s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:02:14+08:00 ] 127.0.0.1 GET localhost/login
[运行时间：0.048226s] [吞吐率：20.74req/s] [内存消耗：1,328.49kb] [文件加载：38]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\login\controller\Index->index[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T13:02:14+08:00 ] 127.0.0.1 GET localhost/admin
[运行时间：0.068691s] [吞吐率：14.56req/s] [内存消耗：2,571.05kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Index->index[ D:\server\nginx\html\phpapp\application\admin\controller\Index.php ]
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/admin\view\admin\admin.html [ array (
  0 => 'catelist',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001097s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000933s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000529s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000877s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000548s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000813s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000521s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:02:14+08:00 ] 127.0.0.1 GET localhost/a
[运行时间：0.044224s] [吞吐率：22.61req/s] [内存消耗：1,141.11kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'a',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'image/webp,image/apng,image/*,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T13:02:14+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.176834s] [吞吐率：5.66req/s] [内存消耗：2,773.63kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001052s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.032904s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000870s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001370s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000639s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000837s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.022095s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000360s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000474s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001356s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000514s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000497s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.019001s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.019251s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000467s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000312s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000286s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.013096s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000540s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:02:14+08:00 ] 127.0.0.1 GET localhost/admin/massage/getmassagelist?page=1&limit=10
[运行时间：0.066652s] [吞吐率：15.00req/s] [内存消耗：2,147.98kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'massage',
    2 => 'getmassagelist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Massage->getMassageList[ D:\server\nginx\html\phpapp\application\admin\controller\Massage.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001312s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_massage` [ RunTime:0.005159s ]
[ sql ] [ SQL ] SELECT * FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.019633s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000483s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:02:15+08:00 ] 127.0.0.1 GET localhost/admin/comments/getcommentslist?page=1&limit=10
[运行时间：0.094529s] [吞吐率：10.58req/s] [内存消耗：2,147.08kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'comments',
    2 => 'getcommentslist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Comments->getCommentsList[ D:\server\nginx\html\phpapp\application\admin\controller\Comments.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.009401s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.041582s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.001591s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000444s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:02:15+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.066577s] [吞吐率：15.02req/s] [内存消耗：2,773.63kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001017s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000845s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000519s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000814s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000539s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000971s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000584s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000416s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000589s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000820s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000497s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000495s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000809s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000743s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000559s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000451s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000423s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.001171s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.001305s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:04+08:00 ] 127.0.0.1 GET localhost/admin
[运行时间：0.095944s] [吞吐率：10.42req/s] [内存消耗：2,746.95kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Index->index[ D:\server\nginx\html\phpapp\application\admin\controller\Index.php ]
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/admin\view\admin\admin.html [ array (
  0 => 'catelist',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001276s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.025798s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000562s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000896s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000482s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001565s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000675s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:04+08:00 ] 127.0.0.1 GET localhost/a
[运行时间：0.039951s] [吞吐率：25.03req/s] [内存消耗：1,141.11kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'a',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'image/webp,image/apng,image/*,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T13:05:05+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.107117s] [吞吐率：9.34req/s] [内存消耗：2,773.63kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.007567s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000930s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000564s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000893s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000472s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.004439s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000833s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000622s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000476s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001000s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000595s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000512s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001066s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.002014s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000476s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000313s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000313s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.017562s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000374s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:05+08:00 ] 127.0.0.1 GET localhost/admin/massage/getmassagelist?page=1&limit=10
[运行时间：0.084964s] [吞吐率：11.77req/s] [内存消耗：2,147.98kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'massage',
    2 => 'getmassagelist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Massage->getMassageList[ D:\server\nginx\html\phpapp\application\admin\controller\Massage.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001606s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_massage` [ RunTime:0.026962s ]
[ sql ] [ SQL ] SELECT * FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.022884s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000477s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:06+08:00 ] 127.0.0.1 GET localhost/admin/comments/getcommentslist?page=1&limit=10
[运行时间：0.088236s] [吞吐率：11.33req/s] [内存消耗：2,147.08kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'comments',
    2 => 'getcommentslist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Comments->getCommentsList[ D:\server\nginx\html\phpapp\application\admin\controller\Comments.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001398s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.026639s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.011521s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000604s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:06+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.105650s] [吞吐率：9.47req/s] [内存消耗：2,773.63kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001305s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001447s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000573s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001052s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000570s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001311s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000583s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000474s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000549s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001176s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000513s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000554s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001092s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000869s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000611s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000525s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000529s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.018175s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000635s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:07+08:00 ] 127.0.0.1 GET localhost/admin
[运行时间：0.053810s] [吞吐率：18.58req/s] [内存消耗：2,571.05kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Index->index[ D:\server\nginx\html\phpapp\application\admin\controller\Index.php ]
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/admin\view\admin\admin.html [ array (
  0 => 'catelist',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001171s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000902s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000529s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001368s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000529s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000872s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000457s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:07+08:00 ] 127.0.0.1 GET localhost/a
[运行时间：0.052515s] [吞吐率：19.04req/s] [内存消耗：1,141.11kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'a',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'image/webp,image/apng,image/*,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T13:05:07+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.072510s] [吞吐率：13.79req/s] [内存消耗：2,773.63kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000987s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001359s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000506s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000905s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.002901s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001089s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000451s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000277s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000311s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000786s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000334s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000366s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000840s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000542s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000526s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000332s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000327s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000729s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000492s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:08+08:00 ] 127.0.0.1 GET localhost/admin/massage/getmassagelist?page=1&limit=10
[运行时间：0.067460s] [吞吐率：14.82req/s] [内存消耗：2,147.98kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'massage',
    2 => 'getmassagelist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Massage->getMassageList[ D:\server\nginx\html\phpapp\application\admin\controller\Massage.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001926s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_massage` [ RunTime:0.021572s ]
[ sql ] [ SQL ] SELECT * FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000647s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000288s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:08+08:00 ] 127.0.0.1 GET localhost/admin/comments/getcommentslist?page=1&limit=10
[运行时间：0.059398s] [吞吐率：16.84req/s] [内存消耗：2,147.08kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'comments',
    2 => 'getcommentslist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Comments->getCommentsList[ D:\server\nginx\html\phpapp\application\admin\controller\Comments.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001194s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.008427s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000721s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000273s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:08+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.074079s] [吞吐率：13.50req/s] [内存消耗：2,773.63kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001175s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000708s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000352s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000675s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000339s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000887s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.001296s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000561s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000372s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000685s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000312s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000300s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000647s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000583s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000393s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000337s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000279s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000335s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.001494s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:09+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.058019s] [吞吐率：17.24req/s] [内存消耗：2,694.01kb] [文件加载：50]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001107s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001479s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000514s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.002485s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000726s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:16+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.066316s] [吞吐率：15.08req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001361s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.002879s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000803s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000388s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000406s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000894s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000428s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000384s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000844s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000684s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.001171s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000615s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000416s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000669s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000516s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:18+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.047142s] [吞吐率：21.21req/s] [内存消耗：2,525.70kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001124s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000804s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000506s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000760s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000514s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:53+08:00 ] 127.0.0.1 GET localhost/login
[运行时间：0.042702s] [吞吐率：23.42req/s] [内存消耗：1,328.49kb] [文件加载：38]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\login\controller\Index->index[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T13:05:53+08:00 ] 127.0.0.1 GET localhost/admin
[运行时间：0.188320s] [吞吐率：5.31req/s] [内存消耗：2,571.05kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Index->index[ D:\server\nginx\html\phpapp\application\admin\controller\Index.php ]
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/admin\view\admin\admin.html [ array (
  0 => 'catelist',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.003515s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.040144s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.033377s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001320s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.001246s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001651s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000715s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:54+08:00 ] 127.0.0.1 GET localhost/a
[运行时间：0.061498s] [吞吐率：16.26req/s] [内存消耗：1,141.11kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'a',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'image/webp,image/apng,image/*,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T13:05:54+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.067099s] [吞吐率：14.90req/s] [内存消耗：2,773.63kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002577s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000882s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000539s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000880s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000502s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000879s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000528s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000453s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000524s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000967s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000530s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000583s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000863s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.002224s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000596s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000479s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000440s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000864s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000796s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:54+08:00 ] 127.0.0.1 GET localhost/admin/massage/getmassagelist?page=1&limit=10
[运行时间：0.048674s] [吞吐率：20.54req/s] [内存消耗：2,147.98kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'massage',
    2 => 'getmassagelist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Massage->getMassageList[ D:\server\nginx\html\phpapp\application\admin\controller\Massage.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002515s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_massage` [ RunTime:0.001871s ]
[ sql ] [ SQL ] SELECT * FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000919s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000480s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:54+08:00 ] 127.0.0.1 GET localhost/admin/comments/getcommentslist?page=1&limit=10
[运行时间：0.095236s] [吞吐率：10.50req/s] [内存消耗：2,147.08kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'comments',
    2 => 'getcommentslist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Comments->getCommentsList[ D:\server\nginx\html\phpapp\application\admin\controller\Comments.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.044348s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.000836s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.001574s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000286s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:05:54+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.062281s] [吞吐率：16.06req/s] [内存消耗：2,773.63kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001123s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001210s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000753s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000792s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000441s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000925s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000605s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000474s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000405s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000797s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000420s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000388s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000737s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000651s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000467s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000372s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000370s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000345s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000414s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:06:10+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.048323s] [吞吐率：20.69req/s] [内存消耗：2,525.70kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001398s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.005309s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000526s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000900s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000523s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:07:31+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.169476s] [吞吐率：5.90req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.082271s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.022764s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.012461s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000408s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000502s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000888s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000500s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000435s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000915s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000635s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000514s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000461s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000395s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000417s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000459s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:07:33+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.046767s] [吞吐率：21.38req/s] [内存消耗：2,525.70kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001026s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000836s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000448s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000716s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000505s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:07:34+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.072697s] [吞吐率：13.76req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001058s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001530s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000501s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000405s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000457s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000717s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000480s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000764s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000805s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000688s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000559s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000453s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000557s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000540s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000512s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:07:35+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.044709s] [吞吐率：22.37req/s] [内存消耗：2,525.70kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001021s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000823s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000450s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000711s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000506s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:07:36+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.071929s] [吞吐率：13.90req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001549s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.002085s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000804s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.001714s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000839s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000867s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000502s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000483s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000782s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000727s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000601s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000494s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000423s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.001625s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000574s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:07:37+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.046814s] [吞吐率：21.36req/s] [内存消耗：2,525.70kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001017s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001573s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.001200s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000970s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000542s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:07:38+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.072453s] [吞吐率：13.80req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001473s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001458s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000509s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000406s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000452s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000889s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000529s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000488s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.002183s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.001385s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000726s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000489s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000437s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000444s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000485s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:07:40+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.049292s] [吞吐率：20.29req/s] [内存消耗：2,525.70kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001023s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000802s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000450s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000718s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001898s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:07:41+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.077823s] [吞吐率：12.85req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.004660s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001377s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000405s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000280s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000315s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000780s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000332s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000300s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001202s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000626s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000398s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000313s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000281s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000295s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000372s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:07:42+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.052723s] [吞吐率：18.97req/s] [内存消耗：2,525.70kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.003433s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001501s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000498s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000713s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000546s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:07:43+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.169918s] [吞吐率：5.89req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.003166s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001880s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000507s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000408s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000458s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001839s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000526s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000478s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.002855s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.101008s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000632s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000458s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000434s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000435s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000487s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:07:44+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.047575s] [吞吐率：21.02req/s] [内存消耗：2,525.70kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001031s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000888s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000594s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000780s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000533s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:07:56+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.055740s] [吞吐率：17.94req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001111s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001752s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000537s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000399s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000462s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000772s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000508s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000454s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000875s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000732s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000575s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000521s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000465s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000419s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000485s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:08:00+08:00 ] 127.0.0.1 GET localhost/blog/python/detail/id/2.html
[运行时间：0.030384s] [吞吐率：32.91req/s] [内存消耗：1,146.50kb] [文件加载：36]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'python',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T13:09:03+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.283672s] [吞吐率：3.53req/s] [内存消耗：2,729.62kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.010220s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.210242s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000580s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.002505s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.002433s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000816s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000498s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000425s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001031s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000711s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000568s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000472s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000433s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.001725s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000526s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:09:06+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.043937s] [吞吐率：22.76req/s] [内存消耗：2,525.84kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001061s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000869s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000484s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000711s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000530s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:09:15+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.061903s] [吞吐率：16.15req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001101s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001665s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000818s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000471s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000462s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000897s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000406s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.001425s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000799s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000641s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000478s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000396s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000551s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000408s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000493s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:09:17+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.047173s] [吞吐率：21.20req/s] [内存消耗：2,525.84kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001031s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000853s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000453s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000702s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000507s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:09:18+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.173603s] [吞吐率：5.76req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001026s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.078458s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000544s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.001414s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000458s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001515s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000540s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000447s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000784s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000741s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000558s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000511s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000424s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000500s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000501s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:09:20+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.047508s] [吞吐率：21.05req/s] [内存消耗：2,525.84kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.003973s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001510s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000472s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000701s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000533s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:09:21+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.068664s] [吞吐率：14.56req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002366s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001407s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000574s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000488s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000469s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.003017s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000664s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000452s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000784s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000724s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000569s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000521s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000563s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000466s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000515s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:09:22+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.049087s] [吞吐率：20.37req/s] [内存消耗：2,525.84kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001013s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000817s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000450s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000703s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000472s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:09:32+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.066287s] [吞吐率：15.09req/s] [内存消耗：2,729.37kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002093s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001273s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000494s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000452s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000411s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000908s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000660s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000832s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000997s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000835s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000603s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000491s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000483s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000454s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000469s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:17:33+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.033773s] [吞吐率：29.61req/s] [内存消耗：994.61kb] [文件加载：27]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T13:21:50+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.104461s] [吞吐率：9.57req/s] [内存消耗：2,750.41kb] [文件加载：54]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002262s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.036647s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.007428s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000584s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000506s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000934s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000442s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000431s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000827s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000680s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000793s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000443s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000404s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000429s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000885s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T13:22:12+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.055598s] [吞吐率：17.99req/s] [内存消耗：2,526.13kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001468s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.002430s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.001771s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000787s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000516s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:22:16+08:00 ] 127.0.0.1 GET localhost/api
[运行时间：0.052979s] [吞吐率：18.88req/s] [内存消耗：1,120.13kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'api',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\api\controller\Index->index[ D:\server\nginx\html\phpapp\application\api\controller\Index.php ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T13:22:18+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.091898s] [吞吐率：10.88req/s] [内存消耗：2,526.13kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001992s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.036669s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.009215s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000824s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000508s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:22:25+08:00 ] 127.0.0.1 GET localhost/api
[运行时间：0.018522s] [吞吐率：53.99req/s] [内存消耗：1,120.13kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'api',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\api\controller\Index->index[ D:\server\nginx\html\phpapp\application\api\controller\Index.php ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T13:22:26+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.076354s] [吞吐率：13.10req/s] [内存消耗：2,526.13kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001089s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000851s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.025848s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000836s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000639s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:22:28+08:00 ] 127.0.0.1 GET localhost/api
[运行时间：0.029367s] [吞吐率：34.05req/s] [内存消耗：1,120.13kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'api',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\api\controller\Index->index[ D:\server\nginx\html\phpapp\application\api\controller\Index.php ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T13:22:31+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.071180s] [吞吐率：14.05req/s] [内存消耗：2,526.13kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.021045s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.002199s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000970s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000753s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000513s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:22:33+08:00 ] 127.0.0.1 GET localhost/api
[运行时间：0.030246s] [吞吐率：33.06req/s] [内存消耗：1,120.13kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'api',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\api\controller\Index->index[ D:\server\nginx\html\phpapp\application\api\controller\Index.php ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T13:22:35+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.042622s] [吞吐率：23.46req/s] [内存消耗：2,526.13kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001226s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001067s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000485s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000845s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000541s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:22:44+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.063628s] [吞吐率：15.72req/s] [内存消耗：2,525.98kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|4',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001974s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.002473s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000915s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001557s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000618s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:23:38+08:00 ] 127.0.0.1 GET localhost/search?q=1
[运行时间：0.019560s] [吞吐率：51.13req/s] [内存消耗：1,117.61kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'search',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'q' => '1',
)
[ info ] [ RUN ] app\Search\controller\Index->index[ D:\server\nginx\html\phpapp\application\search\controller\Index.php ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T13:23:39+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.050364s] [吞吐率：19.86req/s] [内存消耗：2,525.61kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001145s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000930s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000506s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000757s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000530s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T13:23:42+08:00 ] 127.0.0.1 GET localhost/search?q=sqwqw
[运行时间：0.024111s] [吞吐率：41.48req/s] [内存消耗：1,117.63kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'search',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'q' => 'sqwqw',
)
[ info ] [ RUN ] app\Search\controller\Index->index[ D:\server\nginx\html\phpapp\application\search\controller\Index.php ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T13:23:44+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.137303s] [吞吐率：7.28req/s] [内存消耗：2,525.61kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001103s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.087196s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000517s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000724s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000510s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T20:53:02+08:00 ] 127.0.0.1 GET localhost/
[运行时间：1.200635s] [吞吐率：0.83req/s] [内存消耗：2,525.61kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.087792s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.085633s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.001550s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001631s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000554s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T20:53:05+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.214445s] [吞吐率：4.66req/s] [内存消耗：2,750.31kb] [文件加载：54]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002354s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.004970s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000780s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000921s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000742s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001129s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000422s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000433s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.020395s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.014160s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000858s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000433s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000396s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000461s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000759s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:53:06+08:00 ] 127.0.0.1 GET localhost/blog/python/detail/id/2.html
[运行时间：0.095559s] [吞吐率：10.46req/s] [内存消耗：1,146.79kb] [文件加载：36]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'python',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T20:53:36+08:00 ] 127.0.0.1 GET localhost/blog/python/detail/id/2.html
[运行时间：0.026530s] [吞吐率：37.69req/s] [内存消耗：1,147.29kb] [文件加载：36]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'python',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T20:53:39+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.150320s] [吞吐率：6.65req/s] [内存消耗：2,894.43kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002361s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003986s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000867s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.001465s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000975s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000776s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000931s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.001039s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.002759s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.001628s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000576s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000810s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000446s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.001025s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.001117s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:53:40+08:00 ] 127.0.0.1 GET localhost/blog/python/detail/id/2.html
[运行时间：0.035111s] [吞吐率：28.48req/s] [内存消耗：1,146.79kb] [文件加载：36]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'python',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T20:53:47+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.619642s] [吞吐率：1.61req/s] [内存消耗：2,752.29kb] [文件加载：54]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.319690s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.067718s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.048133s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.038254s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000552s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000990s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000953s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000538s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000892s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.059102s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000799s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.001209s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000870s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000547s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000636s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:53:54+08:00 ] 127.0.0.1 GET localhost/blog/python/detail/id/2.html
[运行时间：0.058274s] [吞吐率：17.16req/s] [内存消耗：1,148.89kb] [文件加载：36]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'python',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T20:53:58+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.132619s] [吞吐率：7.54req/s] [内存消耗：2,752.29kb] [文件加载：54]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002479s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.044846s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.001735s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000897s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000486s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001483s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000576s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.002189s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.016351s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000812s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.001223s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000491s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000419s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000446s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000512s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:53:59+08:00 ] 127.0.0.1 GET localhost/blog/detail/id/2.html
[运行时间：0.035212s] [吞吐率：28.40req/s] [内存消耗：1,147.64kb] [文件加载：36]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'detail',
    2 => 'id',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T20:54:27+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.123259s] [吞吐率：8.11req/s] [内存消耗：2,896.16kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.034840s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003462s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000969s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.002632s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000595s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.007301s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000506s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000450s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.015948s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000931s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000677s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000456s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000448s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000414s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000501s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:54:29+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.195708s] [吞吐率：5.11req/s] [内存消耗：2,752.29kb] [文件加载：54]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.004985s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.005424s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.048560s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.001640s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.012217s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001109s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000444s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000402s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.020126s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.003612s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.002984s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000686s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000988s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.001167s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000916s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:54:30+08:00 ] 127.0.0.1 GET localhost/blog/python/detail/id/2.html
[运行时间：0.042294s] [吞吐率：23.64req/s] [内存消耗：1,148.89kb] [文件加载：36]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'python',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T20:54:31+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.105537s] [吞吐率：9.48req/s] [内存消耗：2,752.29kb] [文件加载：54]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001819s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003089s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000818s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000690s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000389s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000988s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000421s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000510s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001138s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.001365s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.029455s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000531s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000379s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000381s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000495s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:54:34+08:00 ] 127.0.0.1 GET localhost/blog/index/detail/id/2.html
[运行时间：0.040941s] [吞吐率：24.43req/s] [内存消耗：1,453.08kb] [文件加载：42]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'index',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T20:55:15+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.116846s] [吞吐率：8.56req/s] [内存消耗：2,896.16kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001542s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.022408s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000802s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000685s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000414s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000767s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000408s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000365s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001345s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.017206s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.001960s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000511s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000446s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000448s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000510s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:55:16+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.130421s] [吞吐率：7.67req/s] [内存消耗：2,752.29kb] [文件加载：54]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002320s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.042397s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000766s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000916s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000349s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000736s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000353s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000301s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.013095s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000601s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000449s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000322s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000280s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000295s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000353s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:55:19+08:00 ] 127.0.0.1 GET localhost/blog/python/detail/id/2.html
[运行时间：0.027486s] [吞吐率：36.38req/s] [内存消耗：1,148.89kb] [文件加载：36]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'python',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T20:55:20+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.095215s] [吞吐率：10.50req/s] [内存消耗：2,752.29kb] [文件加载：54]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002016s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003601s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.001134s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000764s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000619s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000913s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000517s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000453s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000822s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000790s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.021634s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000704s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000432s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000421s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000591s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:55:22+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.125104s] [吞吐率：7.99req/s] [内存消耗：2,781.77kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001846s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.002985s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000863s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001817s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.001244s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000657s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.003050s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000944s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:56:02+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.057012s] [吞吐率：17.54req/s] [内存消耗：2,777.86kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001769s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003173s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000506s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001443s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000818s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000618s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.000819s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000567s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:56:16+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.078447s] [吞吐率：12.75req/s] [内存消耗：2,633.98kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001766s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.004468s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.001756s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001257s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000845s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000624s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.029406s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000545s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:56:24+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.080325s] [吞吐率：12.45req/s] [内存消耗：2,525.61kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002145s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.023670s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000517s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001334s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000547s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T20:56:34+08:00 ] 127.0.0.1 GET localhost/login'
[运行时间：0.041624s] [吞吐率：24.02req/s] [内存消耗：1,141.56kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login\'',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T20:56:36+08:00 ] 127.0.0.1 GET localhost/login
[运行时间：0.097777s] [吞吐率：10.23req/s] [内存消耗：1,328.28kb] [文件加载：38]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\login\controller\Index->index[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T20:56:36+08:00 ] 127.0.0.1 GET localhost/admin
[运行时间：0.216010s] [吞吐率：4.63req/s] [内存消耗：2,570.84kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Index->index[ D:\server\nginx\html\phpapp\application\admin\controller\Index.php ]
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/admin\view\admin\admin.html [ array (
  0 => 'catelist',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001917s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004055s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001747s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001506s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.037055s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000985s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.017021s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T20:56:37+08:00 ] 127.0.0.1 GET localhost/a
[运行时间：0.048943s] [吞吐率：20.43req/s] [内存消耗：1,141.40kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'a',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'image/webp,image/apng,image/*,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T20:56:37+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.103899s] [吞吐率：9.62req/s] [内存消耗：2,774.04kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001720s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003669s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000607s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.002077s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000618s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001136s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000590s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000487s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000561s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000879s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000578s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000529s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000836s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.001265s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000587s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000425s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000397s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000408s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000476s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:56:37+08:00 ] 127.0.0.1 GET localhost/admin/massage/getmassagelist?page=1&limit=10
[运行时间：0.067514s] [吞吐率：14.81req/s] [内存消耗：2,148.27kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'massage',
    2 => 'getmassagelist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Massage->getMassageList[ D:\server\nginx\html\phpapp\application\admin\controller\Massage.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001341s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_massage` [ RunTime:0.006997s ]
[ sql ] [ SQL ] SELECT * FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.001613s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000817s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:56:37+08:00 ] 127.0.0.1 GET localhost/admin/comments/getcommentslist?page=1&limit=10
[运行时间：0.079696s] [吞吐率：12.55req/s] [内存消耗：2,147.37kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'comments',
    2 => 'getcommentslist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Comments->getCommentsList[ D:\server\nginx\html\phpapp\application\admin\controller\Comments.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001542s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.028327s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.001332s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000774s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:56:37+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.104285s] [吞吐率：9.59req/s] [内存消耗：2,774.04kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001639s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004443s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.026268s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.003136s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000554s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001320s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000402s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000261s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000312s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000770s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000425s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000831s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001257s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000617s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000475s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000465s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000372s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000370s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000452s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:56:40+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.074033s] [吞吐率：13.51req/s] [内存消耗：2,633.98kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001686s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003339s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000515s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001367s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.001378s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000879s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.021953s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000541s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:57:40+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.073773s] [吞吐率：13.56req/s] [内存消耗：2,806.36kb] [文件加载：55]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001776s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003521s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000929s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001201s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000750s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000604s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.001414s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.001052s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ error ] [0]语法解析错误: syntax error, unexpected 'id' (T_STRING)[D:\server\nginx\html\phpapp\runtime\temp\ebebc37a27df21ad5473443c814d3148.php:62]
---------------------------------------------------------------
[ 2019-02-25T20:58:07+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.070585s] [吞吐率：14.17req/s] [内存消耗：2,781.86kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001938s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.004419s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000743s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001308s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000978s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000703s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.001260s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000552s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:58:12+08:00 ] 127.0.0.1 GET localhost/login/index/loginoff
[运行时间：0.020281s] [吞吐率：49.31req/s] [内存消耗：1,328.20kb] [文件加载：38]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => 'index',
    2 => 'loginoff',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\login\controller\Index->LoginOff[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T20:58:12+08:00 ] 127.0.0.1 GET localhost/login
[运行时间：0.034947s] [吞吐率：28.61req/s] [内存消耗：1,459.63kb] [文件加载：41]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|5',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\login\controller\Index->index[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/login\view\login\login.html [ array (
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T20:58:14+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.083748s] [吞吐率：11.94req/s] [内存消耗：2,632.66kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.003629s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.004294s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000973s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001262s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000715s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000592s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.003673s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000648s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:58:43+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.055531s] [吞吐率：18.01req/s] [内存消耗：2,776.56kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001722s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003944s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000933s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001209s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000789s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000595s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.002011s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000949s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:58:45+08:00 ] 127.0.0.1 GET localhost/login
[运行时间：0.032789s] [吞吐率：30.50req/s] [内存消耗：1,461.45kb] [文件加载：41]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents/detail/id/2.html',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\login\controller\Index->index[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/login\view\login\login.html [ array (
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T20:58:48+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.076396s] [吞吐率：13.09req/s] [内存消耗：2,632.68kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001865s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.006304s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.001101s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001316s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000763s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000591s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.001663s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000879s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:59:18+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.221700s] [吞吐率：4.51req/s] [内存消耗：2,632.68kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001202s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.164053s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000578s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001774s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000938s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.001251s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.001684s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.001044s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:59:27+08:00 ] 127.0.0.1 POST localhost/login/index/validatelogin
[运行时间：0.224516s] [吞吐率：4.45req/s] [内存消耗：2,477.30kb] [文件加载：45]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => 'index',
    2 => 'validatelogin',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/login',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '57',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'username' => 'caojie',
  'password' => 'b476382669da9ddd2994961afe539fae',
)
[ info ] [ RUN ] app\login\controller\Index->validateLogin[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002755s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_users` [ RunTime:0.083077s ]
[ sql ] [ SQL ] SELECT * FROM `think_users` WHERE  `username` = 'caojie' LIMIT 1 [ RunTime:0.080558s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_users',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_users` WHERE  `username` = 'caojie'  AND `password` = 'd226d500e7899a09458559bf2661a62b' LIMIT 1 [ RunTime:0.001032s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_users',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:59:27+08:00 ] 127.0.0.1 GET localhost/admin
[运行时间：0.116161s] [吞吐率：8.61req/s] [内存消耗：2,571.47kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/login',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Index->index[ D:\server\nginx\html\phpapp\application\admin\controller\Index.php ]
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/admin\view\admin\admin.html [ array (
  0 => 'catelist',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001466s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.002836s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000444s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.018477s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.001033s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.005371s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000566s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T20:59:27+08:00 ] 127.0.0.1 GET localhost/a
[运行时间：0.085321s] [吞吐率：11.72req/s] [内存消耗：1,141.40kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'a',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'image/webp,image/apng,image/*,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T20:59:28+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.115093s] [吞吐率：8.69req/s] [内存消耗：2,774.04kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.024903s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.018888s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.002853s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.002105s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000484s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001026s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000442s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000336s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000386s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000756s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000406s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000401s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000953s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000638s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000542s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000397s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000361s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000366s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000461s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:59:28+08:00 ] 127.0.0.1 GET localhost/admin/massage/getmassagelist?page=1&limit=10
[运行时间：0.054780s] [吞吐率：18.25req/s] [内存消耗：2,148.27kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'massage',
    2 => 'getmassagelist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Massage->getMassageList[ D:\server\nginx\html\phpapp\application\admin\controller\Massage.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001817s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_massage` [ RunTime:0.003273s ]
[ sql ] [ SQL ] SELECT * FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000709s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000926s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:59:28+08:00 ] 127.0.0.1 GET localhost/admin/comments/getcommentslist?page=1&limit=10
[运行时间：0.046773s] [吞吐率：21.38req/s] [内存消耗：2,147.37kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'comments',
    2 => 'getcommentslist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Comments->getCommentsList[ D:\server\nginx\html\phpapp\application\admin\controller\Comments.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001498s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.003485s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.001359s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000612s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:59:28+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.073596s] [吞吐率：13.59req/s] [内存消耗：2,774.04kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001859s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003319s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000449s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001188s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000422s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000794s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000432s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000351s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000376s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000945s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000405s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000660s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000771s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000600s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000473s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000385s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000394s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.002387s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000784s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T20:59:30+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.051242s] [吞吐率：19.52req/s] [内存消耗：2,634.00kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002550s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003527s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000968s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001905s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000776s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000605s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.000805s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000806s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:03:34+08:00 ] 127.0.0.1 GET localhost/blog/comment/comment
[运行时间：0.037872s] [吞吐率：26.40req/s] [内存消耗：1,145.05kb] [文件加载：36]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'comment',
    2 => 'comment',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:03:49+08:00 ] 127.0.0.1 GET localhost/blog/comment/comment
[运行时间：0.026524s] [吞吐率：37.70req/s] [内存消耗：1,145.64kb] [文件加载：36]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'comment',
    2 => 'comment',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:03:52+08:00 ] 127.0.0.1 GET localhost/blog/comment/comment
[运行时间：0.031625s] [吞吐率：31.62req/s] [内存消耗：1,145.64kb] [文件加载：36]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'comment',
    2 => 'comment',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:04:06+08:00 ] 127.0.0.1 GET localhost//blog/contents/comment
[运行时间：0.047270s] [吞吐率：21.16req/s] [内存消耗：1,156.70kb] [文件加载：37]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'comment',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->comment[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
[ error ] [8]未定义数组索引: comment_text[D:\server\nginx\html\phpapp\application\blog\controller\Contents.php:39]
---------------------------------------------------------------
[ 2019-02-25T21:04:09+08:00 ] 127.0.0.1 GET localhost/blog/contents/comment
[运行时间：0.027730s] [吞吐率：36.06req/s] [内存消耗：1,156.79kb] [文件加载：37]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'comment',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=aif5obqaf0e17evf48oa5ma5pr; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->comment[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
[ error ] [8]未定义数组索引: comment_text[D:\server\nginx\html\phpapp\application\blog\controller\Contents.php:39]
---------------------------------------------------------------
[ 2019-02-25T21:04:23+08:00 ] 127.0.0.1 GET localhost/blog/contents/comment
[运行时间：0.020863s] [吞吐率：47.93req/s] [内存消耗：1,063.52kb] [文件加载：31]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'comment',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->comment[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:05:41+08:00 ] 127.0.0.1 GET localhost/blog/contents/comment
[运行时间：0.018924s] [吞吐率：52.84req/s] [内存消耗：1,063.52kb] [文件加载：31]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'comment',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->comment[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:05:42+08:00 ] 127.0.0.1 GET localhost/blog/contents/comment
[运行时间：0.020397s] [吞吐率：49.03req/s] [内存消耗：1,063.52kb] [文件加载：31]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'comment',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->comment[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:05:47+08:00 ] 127.0.0.1 GET localhost/login/index/loginoff
[运行时间：0.045069s] [吞吐率：22.19req/s] [内存消耗：1,327.77kb] [文件加载：38]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => 'index',
    2 => 'loginoff',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\login\controller\Index->LoginOff[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:05:47+08:00 ] 127.0.0.1 GET localhost/login
[运行时间：0.026802s] [吞吐率：37.31req/s] [内存消耗：1,459.63kb] [文件加载：41]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\login\controller\Index->index[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/login\view\login\login.html [ array (
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:05:55+08:00 ] 127.0.0.1 POST localhost/login/index/validatelogin
[运行时间：0.076906s] [吞吐率：13.00req/s] [内存消耗：2,477.30kb] [文件加载：45]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => 'index',
    2 => 'validatelogin',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/login',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '57',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'username' => 'caojie',
  'password' => 'b476382669da9ddd2994961afe539fae',
)
[ info ] [ RUN ] app\login\controller\Index->validateLogin[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002577s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_users` [ RunTime:0.024046s ]
[ sql ] [ SQL ] SELECT * FROM `think_users` WHERE  `username` = 'caojie' LIMIT 1 [ RunTime:0.001076s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_users',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_users` WHERE  `username` = 'caojie'  AND `password` = 'd226d500e7899a09458559bf2661a62b' LIMIT 1 [ RunTime:0.006725s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_users',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:05:55+08:00 ] 127.0.0.1 GET localhost/admin
[运行时间：0.096782s] [吞吐率：10.33req/s] [内存消耗：2,571.47kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/login',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Index->index[ D:\server\nginx\html\phpapp\application\admin\controller\Index.php ]
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/admin\view\admin\admin.html [ array (
  0 => 'catelist',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001499s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004939s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000993s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.002934s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000603s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000859s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000941s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:05:55+08:00 ] 127.0.0.1 GET localhost/a
[运行时间：0.052396s] [吞吐率：19.09req/s] [内存消耗：1,141.40kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'a',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'image/webp,image/apng,image/*,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:05:55+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.081688s] [吞吐率：12.24req/s] [内存消耗：2,774.04kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001685s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003540s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001097s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001086s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000646s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001062s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000365s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000265s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000590s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001233s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000364s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000625s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000640s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000537s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000391s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000309s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000280s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000291s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000350s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:05:55+08:00 ] 127.0.0.1 GET localhost/admin/massage/getmassagelist?page=1&limit=10
[运行时间：0.046619s] [吞吐率：21.45req/s] [内存消耗：2,148.27kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'massage',
    2 => 'getmassagelist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Massage->getMassageList[ D:\server\nginx\html\phpapp\application\admin\controller\Massage.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.004250s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_massage` [ RunTime:0.004598s ]
[ sql ] [ SQL ] SELECT * FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000664s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000579s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:05:55+08:00 ] 127.0.0.1 GET localhost/admin/comments/getcommentslist?page=1&limit=10
[运行时间：0.043781s] [吞吐率：22.84req/s] [内存消耗：2,147.41kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'comments',
    2 => 'getcommentslist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Comments->getCommentsList[ D:\server\nginx\html\phpapp\application\admin\controller\Comments.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001413s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.004662s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000378s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000371s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:05:55+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.064861s] [吞吐率：15.42req/s] [内存消耗：2,774.04kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002250s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003404s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000712s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001170s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000464s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000803s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000485s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000335s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000334s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000760s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000402s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000393s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000722s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000587s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000592s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000478s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000331s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000335s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000396s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:06:07+08:00 ] 127.0.0.1 GET localhost/blog/contents/comment
[运行时间：0.027282s] [吞吐率：36.65req/s] [内存消耗：1,157.38kb] [文件加载：37]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'comment',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->comment[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
[ error ] [8]未定义数组索引: comment_text[D:\server\nginx\html\phpapp\application\blog\controller\Contents.php:39]
---------------------------------------------------------------
[ 2019-02-25T21:06:10+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.054770s] [吞吐率：18.26req/s] [内存消耗：2,635.55kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002859s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003331s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000575s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001105s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000719s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000605s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.000768s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000496s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:06:13+08:00 ] 127.0.0.1 POST localhost/blog/contents/comment
[运行时间：0.334211s] [吞吐率：2.99req/s] [内存消耗：2,114.41kb] [文件加载：39]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'comment',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents/detail/id/2.html',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'content-length' => '26',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blog_id' => '2',
  'comment_text' => 'qqq',
)
[ info ] [ RUN ] app\blog\controller\Contents->comment[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001617s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.005268s ]
[ sql ] [ SQL ] INSERT INTO `think_comments` (`blog_id` , `comment_text` , `create_time` , `update_time`) VALUES (2 , 'qqq' , 1551099973 , 1551099973) [ RunTime:0.292017s ]
---------------------------------------------------------------
[ 2019-02-25T21:06:16+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.058040s] [吞吐率：17.23req/s] [内存消耗：2,637.88kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001666s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003957s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000565s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000821s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.003018s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000729s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.000806s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000509s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:09:11+08:00 ] 127.0.0.1 POST localhost/blog/contents/comment
[运行时间：0.118823s] [吞吐率：8.42req/s] [内存消耗：2,115.17kb] [文件加载：39]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'comment',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents/detail/id/2.html',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'content-length' => '25',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blog_id' => '2',
  'comment_text' => '12',
)
[ info ] [ RUN ] app\blog\controller\Contents->comment[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001752s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.005859s ]
[ sql ] [ SQL ] INSERT INTO `think_comments` (`blog_id` , `comment_text` , `user_id` , `create_time` , `update_time`) VALUES (2 , '12' , 2 , 1551100151 , 1551100151) [ RunTime:0.075581s ]
---------------------------------------------------------------
[ 2019-02-25T21:10:37+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.085592s] [吞吐率：11.68req/s] [内存消耗：2,639.90kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.011927s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.023149s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000581s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001365s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.001482s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.001219s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.001955s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.001049s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 2,
  'filtered' => 50.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:12:24+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.070425s] [吞吐率：14.20req/s] [内存消耗：2,787.88kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.010375s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.005462s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.001909s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001114s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.001261s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000642s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.000763s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000516s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 2,
  'filtered' => 50.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:12:29+08:00 ] 127.0.0.1 POST localhost/blog/contents/comment
[运行时间：0.072218s] [吞吐率：13.85req/s] [内存消耗：2,115.17kb] [文件加载：39]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'comment',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents/detail/id/2.html',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'content-length' => '30',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blog_id' => '2',
  'comment_text' => '1231231',
)
[ info ] [ RUN ] app\blog\controller\Contents->comment[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001749s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.005315s ]
[ sql ] [ SQL ] INSERT INTO `think_comments` (`blog_id` , `comment_text` , `user_id` , `create_time` , `update_time`) VALUES (2 , '1231231' , 2 , 1551100349 , 1551100349) [ RunTime:0.027177s ]
---------------------------------------------------------------
[ 2019-02-25T21:12:30+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.065447s] [吞吐率：15.28req/s] [内存消耗：2,642.13kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=946ui54fjr48ke6f73iofg2fgm',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001702s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.004652s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000776s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001258s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000738s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000618s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.000689s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000533s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:13:21+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.077673s] [吞吐率：12.87req/s] [内存消耗：2,640.32kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001870s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003974s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000695s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000851s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000786s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000605s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.000801s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.025938s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:13:32+08:00 ] 127.0.0.1 GET localhost/login
[运行时间：0.027124s] [吞吐率：36.87req/s] [内存消耗：1,461.45kb] [文件加载：41]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents/detail/id/2.html',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\login\controller\Index->index[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/login\view\login\login.html [ array (
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:14:00+08:00 ] 127.0.0.1 POST localhost/login/index/validatelogin
[运行时间：0.058190s] [吞吐率：17.19req/s] [内存消耗：2,478.03kb] [文件加载：45]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => 'index',
    2 => 'validatelogin',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/login',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'content-length' => '57',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'username' => 'caojie',
  'password' => 'b476382669da9ddd2994961afe539fae',
)
[ info ] [ RUN ] app\login\controller\Index->validateLogin[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.003212s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_users` [ RunTime:0.005943s ]
[ sql ] [ SQL ] SELECT * FROM `think_users` WHERE  `username` = 'caojie' LIMIT 1 [ RunTime:0.002409s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_users',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_users` WHERE  `username` = 'caojie'  AND `password` = 'd226d500e7899a09458559bf2661a62b' LIMIT 1 [ RunTime:0.000908s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_users',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:14:00+08:00 ] 127.0.0.1 GET localhost/admin
[运行时间：0.109609s] [吞吐率：9.12req/s] [内存消耗：2,573.32kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/login',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Index->index[ D:\server\nginx\html\phpapp\application\admin\controller\Index.php ]
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/admin\view\admin\admin.html [ array (
  0 => 'catelist',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001752s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.005939s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000664s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001088s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000514s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001048s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000382s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:14:01+08:00 ] 127.0.0.1 GET localhost/a
[运行时间：0.080144s] [吞吐率：12.48req/s] [内存消耗：1,141.88kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'a',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'image/webp,image/apng,image/*,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:14:01+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.126240s] [吞吐率：7.92req/s] [内存消耗：2,776.27kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001986s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003766s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000889s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001547s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000568s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001956s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000897s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000568s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000748s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001996s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000492s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000747s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000930s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000708s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000512s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000413s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000581s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000510s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000586s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:14:01+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.091346s] [吞吐率：10.95req/s] [内存消耗：2,776.27kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002260s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003944s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001171s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001134s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000552s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.002203s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000665s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000464s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000493s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001986s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000889s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.004003s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001124s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000630s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000407s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000321s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000292s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000319s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000372s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:14:01+08:00 ] 127.0.0.1 GET localhost/admin/massage/getmassagelist?page=1&limit=10
[运行时间：0.048239s] [吞吐率：20.73req/s] [内存消耗：2,150.13kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'massage',
    2 => 'getmassagelist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Massage->getMassageList[ D:\server\nginx\html\phpapp\application\admin\controller\Massage.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002986s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_massage` [ RunTime:0.003527s ]
[ sql ] [ SQL ] SELECT * FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000672s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000690s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:14:01+08:00 ] 127.0.0.1 GET localhost/admin/comments/getcommentslist?page=1&limit=10
[运行时间：0.047732s] [吞吐率：20.95req/s] [内存消耗：2,149.64kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'comments',
    2 => 'getcommentslist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Comments->getCommentsList[ D:\server\nginx\html\phpapp\application\admin\controller\Comments.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001553s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.002850s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000419s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000335s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:14:04+08:00 ] 127.0.0.1 GET localhost/login
[运行时间：0.040727s] [吞吐率：24.55req/s] [内存消耗：1,330.85kb] [文件加载：38]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents/detail/id/2.html',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\login\controller\Index->index[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:14:04+08:00 ] 127.0.0.1 GET localhost/admin
[运行时间：0.055376s] [吞吐率：18.06req/s] [内存消耗：2,573.41kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents/detail/id/2.html',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Index->index[ D:\server\nginx\html\phpapp\application\admin\controller\Index.php ]
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/admin\view\admin\admin.html [ array (
  0 => 'catelist',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001510s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003828s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000697s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001165s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000731s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000823s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000389s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:14:05+08:00 ] 127.0.0.1 GET localhost/a
[运行时间：0.050976s] [吞吐率：19.62req/s] [内存消耗：1,141.88kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'a',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'image/webp,image/apng,image/*,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:14:05+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.080672s] [吞吐率：12.40req/s] [内存消耗：2,776.27kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001456s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.002846s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000793s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001215s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000947s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001014s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000632s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000543s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000848s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.001255s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000545s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000514s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000998s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000746s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000558s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000412s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000566s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000421s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000491s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:14:05+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.100823s] [吞吐率：9.92req/s] [内存消耗：2,776.27kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002275s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004437s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000911s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001821s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.001084s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001465s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000682s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000702s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000776s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.003333s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000708s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000542s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001740s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.002636s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000720s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000581s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000468s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000503s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000584s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:14:05+08:00 ] 127.0.0.1 GET localhost/admin/massage/getmassagelist?page=1&limit=10
[运行时间：0.043809s] [吞吐率：22.83req/s] [内存消耗：2,150.13kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'massage',
    2 => 'getmassagelist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Massage->getMassageList[ D:\server\nginx\html\phpapp\application\admin\controller\Massage.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002975s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_massage` [ RunTime:0.003776s ]
[ sql ] [ SQL ] SELECT * FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000622s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000535s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:14:05+08:00 ] 127.0.0.1 GET localhost/admin/comments/getcommentslist?page=1&limit=10
[运行时间：0.047338s] [吞吐率：21.12req/s] [内存消耗：2,149.64kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'comments',
    2 => 'getcommentslist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Comments->getCommentsList[ D:\server\nginx\html\phpapp\application\admin\controller\Comments.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001392s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.004480s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000645s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000582s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:14:06+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.060627s] [吞吐率：16.49req/s] [内存消耗：2,642.13kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001080s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003459s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000525s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000897s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000777s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000593s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.000733s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000502s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:14:07+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.068931s] [吞吐率：14.51req/s] [内存消耗：2,753.42kb] [文件加载：54]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001603s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.004128s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.001202s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000631s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000449s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000891s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000508s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000443s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000797s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000754s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000573s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000449s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000414s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000443s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000834s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:14:07+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.064167s] [吞吐率：15.58req/s] [内存消耗：2,642.13kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'no-cache',
  'pragma' => 'no-cache',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001432s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003058s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000526s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001041s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000779s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000544s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.000860s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000427s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:16:41+08:00 ] 127.0.0.1 POST localhost/blog/contents/comment
[运行时间：0.079758s] [吞吐率：12.54req/s] [内存消耗：2,114.73kb] [文件加载：39]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'comment',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents/detail/id/2.html',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '36',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blog_id' => '2',
  'comment_text' => 'ewewewrewrwrw',
)
[ info ] [ RUN ] app\blog\controller\Contents->comment[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.010452s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.003773s ]
[ sql ] [ SQL ] INSERT INTO `think_comments` (`blog_id` , `comment_text` , `user_id` , `create_time` , `update_time`) VALUES (2 , 'ewewewrewrwrw' , 2 , 1551100600 , 1551100600) [ RunTime:0.036061s ]
---------------------------------------------------------------
[ 2019-02-25T21:23:02+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.057697s] [吞吐率：17.33req/s] [内存消耗：2,790.52kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=luptjs4ln6cjn0fb9emd19j7f8',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002285s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.004780s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000621s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000852s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000761s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000615s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.000752s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000472s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:23:14+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.055166s] [吞吐率：18.13req/s] [内存消耗：2,641.07kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002013s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.004681s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.001387s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001409s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000769s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000574s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.001585s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000578s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:24:10+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.073134s] [吞吐率：13.67req/s] [内存消耗：2,641.31kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001731s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003323s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000632s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001273s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000973s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.022936s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.000949s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000527s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:24:16+08:00 ] 127.0.0.1 GET localhost/login
[运行时间：0.032310s] [吞吐率：30.95req/s] [内存消耗：1,459.72kb] [文件加载：41]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents/detail/id/2.html',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\login\controller\Index->index[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/login\view\login\login.html [ array (
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:24:18+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.090201s] [吞吐率：11.09req/s] [内存消耗：2,640.81kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001847s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.006135s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000964s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001421s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000737s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000599s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.000837s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000514s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:24:21+08:00 ] 127.0.0.1 GET localhost/login
[运行时间：0.023311s] [吞吐率：42.90req/s] [内存消耗：1,459.72kb] [文件加载：41]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents/detail/id/2.html',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\login\controller\Index->index[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/login\view\login\login.html [ array (
) ]
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:24:28+08:00 ] 127.0.0.1 POST localhost/login/index/validatelogin
[运行时间：0.059592s] [吞吐率：16.78req/s] [内存消耗：2,477.30kb] [文件加载：45]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => 'index',
    2 => 'validatelogin',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/login',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '57',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'username' => 'caojie',
  'password' => 'b476382669da9ddd2994961afe539fae',
)
[ info ] [ RUN ] app\login\controller\Index->validateLogin[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002977s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_users` [ RunTime:0.003582s ]
[ sql ] [ SQL ] SELECT * FROM `think_users` WHERE  `username` = 'caojie' LIMIT 1 [ RunTime:0.000919s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_users',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_users` WHERE  `username` = 'caojie'  AND `password` = 'd226d500e7899a09458559bf2661a62b' LIMIT 1 [ RunTime:0.000602s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_users',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:24:28+08:00 ] 127.0.0.1 GET localhost/admin
[运行时间：0.092375s] [吞吐率：10.83req/s] [内存消耗：2,571.47kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/login',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Index->index[ D:\server\nginx\html\phpapp\application\admin\controller\Index.php ]
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/admin\view\admin\admin.html [ array (
  0 => 'catelist',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001856s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.005535s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.002438s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.003962s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000370s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000692s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000308s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:24:29+08:00 ] 127.0.0.1 GET localhost/a
[运行时间：0.061667s] [吞吐率：16.22req/s] [内存消耗：1,141.40kb] [文件加载：33]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'a',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'accept' => 'image/webp,image/apng,image/*,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:24:29+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.080953s] [吞吐率：12.35req/s] [内存消耗：2,774.04kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001876s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003461s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000516s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000932s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000505s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001013s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000478s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000345s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000425s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000778s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000330s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000299s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000635s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000530s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000391s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000342s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000285s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000289s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000448s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:24:29+08:00 ] 127.0.0.1 GET localhost/admin/massage/getmassagelist?page=1&limit=10
[运行时间：0.049333s] [吞吐率：20.27req/s] [内存消耗：2,148.27kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'massage',
    2 => 'getmassagelist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Massage->getMassageList[ D:\server\nginx\html\phpapp\application\admin\controller\Massage.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001540s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_massage` [ RunTime:0.004699s ]
[ sql ] [ SQL ] SELECT * FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.001157s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.002589s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:24:29+08:00 ] 127.0.0.1 GET localhost/admin/comments/getcommentslist?page=1&limit=10
[运行时间：0.049436s] [吞吐率：20.23req/s] [内存消耗：2,147.41kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'comments',
    2 => 'getcommentslist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Comments->getCommentsList[ D:\server\nginx\html\phpapp\application\admin\controller\Comments.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001427s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.002767s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000400s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000380s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:24:29+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.063852s] [吞吐率：15.66req/s] [内存消耗：2,774.04kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001425s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003388s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000649s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001051s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000347s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000884s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000377s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000367s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000315s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000852s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000334s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000300s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000850s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000568s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000399s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000314s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000279s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000366s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000383s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:24:31+08:00 ] 127.0.0.1 GET localhost/login
[运行时间：0.025227s] [吞吐率：39.64req/s] [内存消耗：1,328.88kb] [文件加载：38]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'login',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents/detail/id/2.html',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\login\controller\Index->index[ D:\server\nginx\html\phpapp\application\login\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:24:31+08:00 ] 127.0.0.1 GET localhost/admin
[运行时间：0.048005s] [吞吐率：20.83req/s] [内存消耗：2,571.69kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents/detail/id/2.html',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Index->index[ D:\server\nginx\html\phpapp\application\admin\controller\Index.php ]
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/admin\view\admin\admin.html [ array (
  0 => 'catelist',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001977s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003546s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000501s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000777s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000519s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000851s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000488s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:24:31+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.095769s] [吞吐率：10.44req/s] [内存消耗：2,774.04kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.004902s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.006133s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000801s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001310s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000542s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001051s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000554s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000415s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000475s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000931s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000494s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000486s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001135s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000728s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000620s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000491s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000460s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000463s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000528s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:24:31+08:00 ] 127.0.0.1 GET localhost/admin/massage/getmassagelist?page=1&limit=10
[运行时间：0.056062s] [吞吐率：17.84req/s] [内存消耗：2,148.27kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'massage',
    2 => 'getmassagelist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Massage->getMassageList[ D:\server\nginx\html\phpapp\application\admin\controller\Massage.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001591s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_massage` [ RunTime:0.002924s ]
[ sql ] [ SQL ] SELECT * FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000542s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_massage` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000700s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_massage',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:24:31+08:00 ] 127.0.0.1 GET localhost/admin/comments/getcommentslist?page=1&limit=10
[运行时间：0.045322s] [吞吐率：22.06req/s] [内存消耗：2,147.41kb] [文件加载：40]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'comments',
    2 => 'getcommentslist',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
)
[ info ] [ RUN ] app\admin\controller\Comments->getCommentsList[ D:\server\nginx\html\phpapp\application\admin\controller\Comments.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001709s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.003624s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000710s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_comments` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000645s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:24:31+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.065481s] [吞吐率：15.27req/s] [内存消耗：2,774.04kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001440s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003265s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000440s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000688s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000417s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000910s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000448s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000325s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 3,
  'filtered' => 33.333335876464844,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000381s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000689s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000386s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000369s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000728s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000645s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000462s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000391s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000359s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000431s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000444s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:24:32+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.057562s] [吞吐率：17.37req/s] [内存消耗：2,642.13kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001017s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003917s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000796s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001102s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000752s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000599s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.001555s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000505s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:24:33+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.057839s] [吞吐率：17.29req/s] [内存消耗：2,642.63kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'cache-control' => 'max-age=0',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001611s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.003497s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000551s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000831s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000766s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000575s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.001186s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000532s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:18+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.111173s] [吞吐率：8.99req/s] [内存消耗：2,560.80kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3878',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.010434s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004514s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000905s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001247s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000565s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000840s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001502s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_title`='第一篇博客',`blog_html`='<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',`blog_text`='模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',`update_time`=1551101238  WHERE  `id` = 1 [ RunTime:0.047591s ]
---------------------------------------------------------------
[ 2019-02-25T21:27:18+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.040475s] [吞吐率：24.71req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3878',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001713s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003412s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000492s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000773s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000513s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000814s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000564s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:19+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.043848s] [吞吐率：22.81req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3878',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001675s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004632s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000913s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001107s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000499s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000884s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000565s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:19+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.043977s] [吞吐率：22.74req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3878',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001706s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003945s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001038s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000920s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000518s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000896s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000542s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:20+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.041843s] [吞吐率：23.90req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3878',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001654s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004012s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000881s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001144s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000529s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000842s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000538s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:21+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.042934s] [吞吐率：23.29req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3878',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001689s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003104s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001017s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000835s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000514s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000872s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000539s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:21+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.044928s] [吞吐率：22.26req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3878',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002002s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004109s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000746s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001142s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000483s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000961s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000572s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:23+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.050598s] [吞吐率：19.76req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3878',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001342s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.006187s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001024s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000864s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000540s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001519s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000570s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:23+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.043484s] [吞吐率：23.00req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3878',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002044s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004184s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000838s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001252s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000544s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000902s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000547s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:28+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.071227s] [吞吐率：14.04req/s] [内存消耗：2,557.93kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3885',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001800s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003334s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000865s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000803s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000511s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000848s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000542s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',`update_time`=1551101248  WHERE  `id` = 1 [ RunTime:0.026511s ]
---------------------------------------------------------------
[ 2019-02-25T21:27:29+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.042267s] [吞吐率：23.66req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3885',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001607s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004385s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000886s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001323s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000535s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000981s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000570s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:32+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.097355s] [吞吐率：10.27req/s] [内存消耗：2,558.43kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3908',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br><code>{$varname.aa ?? \'xxx\'}</code><br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001680s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003283s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000877s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000807s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000516s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000869s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000543s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br><code>{$varname.aa ?? \'xxx\'}</code><br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',`update_time`=1551101252  WHERE  `id` = 1 [ RunTime:0.051997s ]
---------------------------------------------------------------
[ 2019-02-25T21:27:33+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.044238s] [吞吐率：22.61req/s] [内存消耗：2,530.08kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3908',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br><code>{$varname.aa ?? \'xxx\'}</code><br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001588s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004200s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000836s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001309s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000574s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000924s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000652s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:35+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.051231s] [吞吐率：19.52req/s] [内存消耗：2,561.86kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3805',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br><code>{$varname.aa ?? \'xxx\'}</code><br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br><code><!--?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?--></code><br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001728s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003944s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000876s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000798s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000509s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000856s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000543s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br><code>{$varname.aa ?? \'xxx\'}</code><br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br><code><!--?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?--></code><br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',`blog_text`='模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',`update_time`=1551101255  WHERE  `id` = 1 [ RunTime:0.006822s ]
---------------------------------------------------------------
[ 2019-02-25T21:27:36+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.041692s] [吞吐率：23.99req/s] [内存消耗：2,529.20kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3805',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br><code>{$varname.aa ?? \'xxx\'}</code><br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br><code><!--?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?--></code><br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001559s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004135s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000879s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001198s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000524s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000838s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000553s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:36+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.040951s] [吞吐率：24.42req/s] [内存消耗：2,529.20kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3805',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br><code>{$varname.aa ?? \'xxx\'}</code><br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br><code><!--?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?--></code><br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001668s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003263s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000999s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000732s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000510s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000819s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000547s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:37+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.048561s] [吞吐率：20.59req/s] [内存消耗：2,544.65kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '220',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p><br></p>',
    'blog_text' => '',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001020s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004741s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000779s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001075s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000519s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000908s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000562s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p><br></p>',`blog_text`='',`update_time`=1551101257  WHERE  `id` = 1 [ RunTime:0.004406s ]
---------------------------------------------------------------
[ 2019-02-25T21:27:37+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.042161s] [吞吐率：23.72req/s] [内存消耗：2,516.24kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '220',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p><br></p>',
    'blog_text' => '',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001639s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003542s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000809s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000909s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000532s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000818s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000544s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:38+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.087563s] [吞吐率：11.42req/s] [内存消耗：2,516.24kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '220',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p><br></p>',
    'blog_text' => '',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.031175s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004296s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.002264s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001319s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000521s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000878s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000538s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:40+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.066582s] [吞吐率：15.02req/s] [内存消耗：2,560.08kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3878',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001784s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004178s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001017s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000925s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000519s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.002747s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000616s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',`blog_text`='模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',`update_time`=1551101260  WHERE  `id` = 1 [ RunTime:0.008964s ]
---------------------------------------------------------------
[ 2019-02-25T21:27:41+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.044599s] [吞吐率：22.42req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3878',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001703s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004061s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000900s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001198s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000528s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000896s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000543s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:42+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.045025s] [吞吐率：22.21req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3878',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002597s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003471s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000898s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000858s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000520s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000885s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000542s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:44+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.065482s] [吞吐率：15.27req/s] [内存消耗：2,557.93kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3885',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001732s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004497s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000715s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001246s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000533s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000895s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000545s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',`update_time`=1551101264  WHERE  `id` = 1 [ RunTime:0.019699s ]
---------------------------------------------------------------
[ 2019-02-25T21:27:44+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.045389s] [吞吐率：22.03req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3885',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001736s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003450s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000906s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000861s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000521s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000898s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000547s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:47+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.049784s] [吞吐率：20.09req/s] [内存消耗：2,558.43kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3908',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br><code>{$varname.aa ?? \'xxx\'}</code><br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001676s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004121s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000801s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001234s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000562s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000936s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000546s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br><code>{$varname.aa ?? \'xxx\'}</code><br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',`update_time`=1551101267  WHERE  `id` = 1 [ RunTime:0.005184s ]
---------------------------------------------------------------
[ 2019-02-25T21:27:47+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.044108s] [吞吐率：22.67req/s] [内存消耗：2,530.08kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3908',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br><code>{$varname.aa ?? \'xxx\'}</code><br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001071s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003644s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000975s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000853s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000520s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000887s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000601s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:50+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.049307s] [吞吐率：20.28req/s] [内存消耗：2,561.86kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3805',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br><code>{$varname.aa ?? \'xxx\'}</code><br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br><code><!--?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?--></code><br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001586s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004527s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000891s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001221s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000510s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000849s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000541s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br><code>{$varname.aa ?? \'xxx\'}</code><br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br><code><!--?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?--></code><br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',`blog_text`='模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',`update_time`=1551101270  WHERE  `id` = 1 [ RunTime:0.004978s ]
---------------------------------------------------------------
[ 2019-02-25T21:27:50+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.043026s] [吞吐率：23.24req/s] [内存消耗：2,529.20kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3805',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br><code>{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }</code><br>5.0版本还支持如下的写法：<br><br><code>{$varname.aa ?? \'xxx\'}</code><br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br><code><!--?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?--></code><br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001905s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003639s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000988s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001290s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000540s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000838s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000549s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:50+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.082992s] [吞吐率：12.05req/s] [内存消耗：2,544.65kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '220',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p><br></p>',
    'blog_text' => '',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001634s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004241s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000892s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001246s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000529s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.015390s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000594s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p><br></p>',`blog_text`='',`update_time`=1551101270  WHERE  `id` = 1 [ RunTime:0.024820s ]
---------------------------------------------------------------
[ 2019-02-25T21:27:51+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.045711s] [吞吐率：21.88req/s] [内存消耗：2,516.24kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '220',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p><br></p>',
    'blog_text' => '',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001503s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003820s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000818s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001494s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000528s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001024s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000540s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:52+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.047500s] [吞吐率：21.05req/s] [内存消耗：2,560.08kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3878',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001594s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004045s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000730s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001132s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000533s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000830s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000565s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',`blog_text`='模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',`update_time`=1551101272  WHERE  `id` = 1 [ RunTime:0.004063s ]
---------------------------------------------------------------
[ 2019-02-25T21:27:58+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.042786s] [吞吐率：23.37req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3878',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001579s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003561s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001047s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001281s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000522s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000843s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000575s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:27:58+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.046056s] [吞吐率：21.71req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3878',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br>{$varname?=\'xxx\'}<br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001726s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004521s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000821s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001131s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000506s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000987s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000558s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:00+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.051389s] [吞吐率：19.46req/s] [内存消耗：2,557.93kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3901',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br><code>{$varname?=\'xxx\'}</code><br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001706s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003530s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000888s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001349s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000518s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000906s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000542s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br><code>{$varname?=\'xxx\'}</code><br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',`update_time`=1551101280  WHERE  `id` = 1 [ RunTime:0.006095s ]
---------------------------------------------------------------
[ 2019-02-25T21:28:01+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.043293s] [吞吐率：23.10req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3901',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br><code>{$varname?=\'xxx\'}</code><br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;<br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001687s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003870s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000906s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001258s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000529s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001113s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000602s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:06+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.050652s] [吞吐率：19.74req/s] [内存消耗：2,561.98kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3859',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br><code>{$varname?=\'xxx\'}</code><br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br><code><!--?php if(!empty($name)) echo \'xxx\'; ?--></code><br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001706s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003837s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000969s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001308s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000550s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000908s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000510s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br><code>{$varname?=\'xxx\'}</code><br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br><code><!--?php if(!empty($name)) echo \'xxx\'; ?--></code><br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',`blog_text`='模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',`update_time`=1551101286  WHERE  `id` = 1 [ RunTime:0.004551s ]
---------------------------------------------------------------
[ 2019-02-25T21:28:06+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.044898s] [吞吐率：22.27req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3859',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br><code>{$varname?=\'xxx\'}</code><br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br><code><!--?php if(!empty($name)) echo \'xxx\'; ?--></code><br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001472s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003673s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000735s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001135s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000433s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000995s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000552s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:07+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.042621s] [吞吐率：23.46req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3859',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br><code>{$varname?=\'xxx\'}</code><br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br><code><!--?php if(!empty($name)) echo \'xxx\'; ?--></code><br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001641s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003337s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001004s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001301s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000507s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000829s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000557s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:07+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.042569s] [吞吐率：23.49req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3859',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br><code>{$varname?=\'xxx\'}</code><br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br><code><!--?php if(!empty($name)) echo \'xxx\'; ?--></code><br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001612s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004359s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000929s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001260s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000532s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000840s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000567s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:08+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.043455s] [吞吐率：23.01req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3859',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br><code>{$varname?=\'xxx\'}</code><br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br><code><!--?php if(!empty($name)) echo \'xxx\'; ?--></code><br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001622s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003596s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001045s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001305s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000518s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000858s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000567s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:09+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.043457s] [吞吐率：23.01req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3859',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br><code>{$varname?=\'xxx\'}</code><br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br><code><!--?php if(!empty($name)) echo \'xxx\'; ?--></code><br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001654s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003577s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000817s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001194s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000534s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000908s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000551s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:10+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.043192s] [吞吐率：23.15req/s] [内存消耗：2,529.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '3859',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>模板可以支持三元运算符，例如：<br><br>{$status? \'正常\' : \'错误\'}<br>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}<br>{$info.status? $info.msg : $info.error }<br>5.0版本还支持如下的写法：<br><br>{$varname.aa ?? \'xxx\'}<br>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：<br><br><br>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;<br>--<br><br><code>{$varname?=\'xxx\'}</code><br>表示$varname为真时才输出xxx。 解析后的代码为：<br><br><code><!--?php if(!empty($name)) echo \'xxx\'; ?--></code><br>--<br><br>{$varname ?: \'no\'}<br>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：<br><br>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;<br>--<br><br>{$a==$b ? \'yes\' : \'no\'}<br>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</p>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001699s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003648s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001017s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001321s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000519s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000861s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000547s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:13+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.074318s] [吞吐率：13.46req/s] [内存消耗：2,544.90kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '220',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p><br></p>',
    'blog_text' => '',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001900s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003542s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000848s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001223s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000538s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001009s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000559s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p><br></p>',`blog_text`='',`update_time`=1551101293  WHERE  `id` = 1 [ RunTime:0.031061s ]
---------------------------------------------------------------
[ 2019-02-25T21:28:13+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.047676s] [吞吐率：20.97req/s] [内存消耗：2,516.24kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '220',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p><br></p>',
    'blog_text' => '',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001005s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.002644s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000886s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001316s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000421s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000879s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000457s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:14+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.041458s] [吞吐率：24.12req/s] [内存消耗：2,516.24kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '220',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p><br></p>',
    'blog_text' => '',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001619s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003305s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000767s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001119s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000553s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000823s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000536s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:15+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.076562s] [吞吐率：13.06req/s] [内存消耗：2,542.99kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '214',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>q</p>',
    'blog_text' => 'q',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.023472s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004123s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001467s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001210s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000523s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000886s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000545s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>q</p>',`blog_text`='q',`update_time`=1551101295  WHERE  `id` = 1 [ RunTime:0.007789s ]
---------------------------------------------------------------
[ 2019-02-25T21:28:15+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.088348s] [吞吐率：11.32req/s] [内存消耗：2,543.02kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '218',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>q\'w</p>',
    'blog_text' => 'q\'w',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002294s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003389s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000836s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001216s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000531s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.038072s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000619s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>q\'w</p>',`blog_text`='q\'w',`update_time`=1551101295  WHERE  `id` = 1 [ RunTime:0.005594s ]
---------------------------------------------------------------
[ 2019-02-25T21:28:15+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.052302s] [吞吐率：19.12req/s] [内存消耗：2,516.24kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '218',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>q\'w</p>',
    'blog_text' => 'q\'w',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001984s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004092s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000916s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001613s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000769s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000920s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000546s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:15+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.053641s] [吞吐率：18.64req/s] [内存消耗：2,543.02kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '222',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>q\'w\'q</p>',
    'blog_text' => 'q\'w\'q',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001522s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003442s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001896s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001231s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000537s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000956s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000524s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>q\'w\'q</p>',`blog_text`='q\'w\'q',`update_time`=1551101295  WHERE  `id` = 1 [ RunTime:0.005486s ]
---------------------------------------------------------------
[ 2019-02-25T21:28:15+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.045925s] [吞吐率：21.77req/s] [内存消耗：2,516.24kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '222',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>q\'w\'q</p>',
    'blog_text' => 'q\'w\'q',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001518s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003390s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001218s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001241s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000523s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001008s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000546s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:15+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.060843s] [吞吐率：16.44req/s] [内存消耗：2,516.24kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '222',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>q\'w\'q</p>',
    'blog_text' => 'q\'w\'q',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001482s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.021772s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000783s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001244s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000531s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000837s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000540s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:16+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.048198s] [吞吐率：20.75req/s] [内存消耗：2,516.24kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '222',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>q\'w\'q</p>',
    'blog_text' => 'q\'w\'q',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001646s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003960s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000812s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001339s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000512s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000948s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000548s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:19+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.065769s] [吞吐率：15.20req/s] [内存消耗：2,543.45kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '302',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p>权威渠道去</p>',
    'blog_text' => '权威渠道去',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001506s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.002853s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000758s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001938s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.001010s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001034s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000683s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>权威渠道去</p>',`blog_text`='权威渠道去',`update_time`=1551101299  WHERE  `id` = 1 [ RunTime:0.005089s ]
---------------------------------------------------------------
[ 2019-02-25T21:28:19+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.048045s] [吞吐率：20.81req/s] [内存消耗：2,542.99kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '220',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p><br></p>',
    'blog_text' => '',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001043s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003146s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000982s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001170s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000575s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000966s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000552s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p><br></p>',`blog_text`='',`update_time`=1551101299  WHERE  `id` = 1 [ RunTime:0.004284s ]
---------------------------------------------------------------
[ 2019-02-25T21:28:20+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.043860s] [吞吐率：22.80req/s] [内存消耗：2,516.24kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '220',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p><br></p>',
    'blog_text' => '',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001394s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003480s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000514s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001293s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000504s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001549s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000587s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:21+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.044293s] [吞吐率：22.58req/s] [内存消耗：2,516.24kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '220',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p><br></p>',
    'blog_text' => '',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001505s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.002867s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000752s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001139s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000424s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000877s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000443s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:21+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.041651s] [吞吐率：24.01req/s] [内存消耗：2,516.24kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '220',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<p><br></p>',
    'blog_text' => '',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001432s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003201s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000527s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001209s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000531s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000893s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000564s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:28+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.110593s] [吞吐率：9.04req/s] [内存消耗：2,570.58kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '4718',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname?=\'xxx\'}</font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$a==$b ? \'yes\' : \'no\'}</font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.004286s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.029413s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001415s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.009822s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000522s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000858s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000537s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname?=\'xxx\'}</font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$a==$b ? \'yes\' : \'no\'}</font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',`blog_text`='模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',`update_time`=1551101308  WHERE  `id` = 1 [ RunTime:0.006093s ]
---------------------------------------------------------------
[ 2019-02-25T21:28:31+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.042076s] [吞吐率：23.77req/s] [内存消耗：2,535.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '4718',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname?=\'xxx\'}</font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$a==$b ? \'yes\' : \'no\'}</font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001463s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003591s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000569s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001179s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000545s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000941s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000563s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:31+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.042329s] [吞吐率：23.62req/s] [内存消耗：2,535.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '4718',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname?=\'xxx\'}</font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$a==$b ? \'yes\' : \'no\'}</font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001435s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.003236s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001016s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001289s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000518s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000900s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000573s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:31+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.077821s] [吞吐率：12.85req/s] [内存消耗：2,535.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '4718',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname?=\'xxx\'}</font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$a==$b ? \'yes\' : \'no\'}</font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001833s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.039532s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000517s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001221s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000528s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000977s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000553s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:32+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.045160s] [吞吐率：22.14req/s] [内存消耗：2,535.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '4718',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname?=\'xxx\'}</font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$a==$b ? \'yes\' : \'no\'}</font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001331s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.002541s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000707s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000837s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000466s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001047s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000631s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:32+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.067805s] [吞吐率：14.75req/s] [内存消耗：2,535.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '4718',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname?=\'xxx\'}</font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$a==$b ? \'yes\' : \'no\'}</font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001174s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.021574s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000560s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000857s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000503s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000827s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000545s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:33+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.039444s] [吞吐率：25.35req/s] [内存消耗：2,535.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '4718',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname?=\'xxx\'}</font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$a==$b ? \'yes\' : \'no\'}</font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001014s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000892s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000517s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000975s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000523s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000969s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000544s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:36+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.067985s] [吞吐率：14.71req/s] [内存消耗：2,565.93kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '4741',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$varname?=\'xxx\'}</code></font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$a==$b ? \'yes\' : \'no\'}</font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001180s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.019636s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000481s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000789s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000513s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000855s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000543s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$varname?=\'xxx\'}</code></font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$a==$b ? \'yes\' : \'no\'}</font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',`update_time`=1551101316  WHERE  `id` = 1 [ RunTime:0.005719s ]
---------------------------------------------------------------
[ 2019-02-25T21:28:37+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.037134s] [吞吐率：26.93req/s] [内存消耗：2,535.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '4741',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$varname?=\'xxx\'}</code></font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$a==$b ? \'yes\' : \'no\'}</font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001010s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000831s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000488s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000761s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000512s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000849s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000548s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:38+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.040554s] [吞吐率：24.66req/s] [内存消耗：2,535.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '4741',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$varname?=\'xxx\'}</code></font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$a==$b ? \'yes\' : \'no\'}</font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001367s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.002460s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000545s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000976s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000509s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000868s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000568s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:38+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.042365s] [吞吐率：23.60req/s] [内存消耗：2,535.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '4741',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$varname?=\'xxx\'}</code></font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$a==$b ? \'yes\' : \'no\'}</font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001528s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.002803s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000709s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001143s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000524s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000936s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000553s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:41+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.050442s] [吞吐率：19.82req/s] [内存消耗：2,565.93kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '4764',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$varname?=\'xxx\'}</code></font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$a==$b ? \'yes\' : \'no\'}</code></font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001950s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.002232s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000658s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001025s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000542s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000833s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000540s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$varname?=\'xxx\'}</code></font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$a==$b ? \'yes\' : \'no\'}</code></font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',`update_time`=1551101321  WHERE  `id` = 1 [ RunTime:0.004756s ]
---------------------------------------------------------------
[ 2019-02-25T21:28:41+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.040730s] [吞吐率：24.55req/s] [内存消耗：2,535.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '4764',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$varname?=\'xxx\'}</code></font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$a==$b ? \'yes\' : \'no\'}</code></font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001489s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.002091s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000683s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001104s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000507s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000905s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000547s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:42+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.056439s] [吞吐率：17.72req/s] [内存消耗：2,535.58kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '4764',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$varname?=\'xxx\'}</code></font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$a==$b ? \'yes\' : \'no\'}</code></font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001497s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001877s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001997s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001085s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000521s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000890s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000568s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:42+08:00 ] 127.0.0.1 POST localhost/admin/blog/createblog
[运行时间：0.105228s] [吞吐率：9.50req/s] [内存消耗：2,621.47kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'createblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '4763',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '',
    'blog_title' => '第一篇博客',
    'cate_id' => '2',
    'blog_html' => '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$varname?=\'xxx\'}</code></font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$a==$b ? \'yes\' : \'no\'}</code></font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>',
    'blog_text' => '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->createblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.023977s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.007527s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000865s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001305s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000521s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000927s ]
[ sql ] [ SQL ] INSERT INTO `think_blog` (`id` , `blog_title` , `cate_id` , `blog_html` , `blog_text` , `create_time` , `update_time`) VALUES (0 , '第一篇博客' , 2 , '<div><span>模板可以支持三元运算符，例如：</span></div><div><div><font>{$status? \'正常\' : \'错误\'}</font></div><div><font>{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}</font></div><div><font>{$info.status? $info.msg : $info.error }</font></div></div><div><span>5.0版本还支持如下的写法：</span></div><div><div><font>{$varname.aa ?? \'xxx\'}</font></div></div><div><span>表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：</span></div><div><font><br></font></div><div><div><font>&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$varname?=\'xxx\'}</code></font></div></div><div><span>表示$varname为真时才输出xxx。 解析后的代码为：</span></div><div><div><font>&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font>{$varname ?: \'no\'}</font></div></div><div><span>表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：</span></div><div><div><font>&lt;?php echo $varname ? $varname : \'no\'; ?&gt;</font></div></div><div><span>--</span></div><div><div><font><code>{$a==$b ? \'yes\' : \'no\'}</code></font></div></div><p></p><div><span>前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=</span></div>' , '模板可以支持三元运算符，例如：{$status? \'正常\' : \'错误\'}{$info[\'status\']? $info[\'msg\'] : $info[\'error\']}{$info.status? $info.msg : $info.error }5.0版本还支持如下的写法：{$varname.aa ?? \'xxx\'}表示如果有设置$varname则输出$varname,否则输出\'xxx\'。 解析后的代码为：&lt;?php echo isset($varname[\'aa\']) ? $varname[\'aa\'] : \'默认值\'; ?&gt;--{$varname?=\'xxx\'}表示$varname为真时才输出xxx。 解析后的代码为：&lt;?php if(!empty($name)) echo \'xxx\'; ?&gt;--{$varname ?: \'no\'}表示如果$varname为真则输出$varname，否则输出no。解析后的代码为：&lt;?php echo $varname ? $varname : \'no\'; ?&gt;--{$a==$b ? \'yes\' : \'no\'}前面的表达式为真输出yes,否则输出no， 条件可以是==、===、!=、!==、&gt;=、&lt;=' , 1551101322 , 1551101322) [ RunTime:0.021652s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 4 LIMIT 1 [ RunTime:0.000557s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000758s ]
[ sql ] [ SQL ] REPLACE INTO `think_blogs_tags` (`blog_id` , `tag_id`) VALUES (4 , 2) [ RunTime:0.004159s ]
[ sql ] [ SQL ] REPLACE INTO `think_blogs_tags` (`blog_id` , `tag_id`) VALUES (4 , 3) [ RunTime:0.003722s ]
---------------------------------------------------------------
[ 2019-02-25T21:28:42+08:00 ] 127.0.0.1 GET localhost/admin/blog/queryblog/action/getbloglist?page=1&limit=10
[运行时间：0.107115s] [吞吐率：9.34req/s] [内存消耗：2,815.93kb] [文件加载：56]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'queryblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'page' => '1',
  'limit' => '10',
  'action' => 'getbloglist',
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->queryblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.004815s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.004155s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000976s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001405s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000517s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000860s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.000540s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000390s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000416s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000726s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000503s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000586s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000866s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000698s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.019598s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 6,
  'filtered' => 16.666667938232422,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000447s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000405s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000418s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000457s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 6,
  'filtered' => 16.666667938232422,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 4 LIMIT 1 [ RunTime:0.000427s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000627s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 4 LIMIT 1 [ RunTime:0.000613s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 4 [ RunTime:0.000490s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 6,
  'filtered' => 16.666667938232422,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:43+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.104264s] [吞吐率：9.59req/s] [内存消耗：2,545.86kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '150',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '',
    'blog_text' => '',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.004803s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.044885s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.010945s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000851s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000484s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000904s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000594s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_title`='',`blog_html`='',`blog_text`='',`update_time`=1551101323  WHERE  `id` = 1 [ RunTime:0.005773s ]
---------------------------------------------------------------
[ 2019-02-25T21:28:45+08:00 ] 127.0.0.1 GET localhost/blog/python
[运行时间：0.031682s] [吞吐率：31.56req/s] [内存消耗：1,145.52kb] [文件加载：36]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'python',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents/detail/id/2.html',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:28:46+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/2.html
[运行时间：0.060365s] [吞吐率：16.57req/s] [内存消耗：2,642.20kb] [文件加载：51]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '2',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001598s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.005153s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000877s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001260s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000742s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000589s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 6,
  'filtered' => 16.666667938232422,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.000800s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 2 [ RunTime:0.000513s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:28:47+08:00 ] 127.0.0.1 GET localhost/
[运行时间：0.054204s] [吞吐率：18.45req/s] [内存消耗：2,526.20kb] [文件加载：48]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => '',
    1 => NULL,
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents/detail/id/2.html',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Index->index[ D:\server\nginx\html\phpapp\application\blog\controller\Index.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\blog\blog.html [ array (
  0 => 'username',
  1 => 'domain',
  2 => 'cates',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001491s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.002312s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` [ RunTime:0.000405s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.002931s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000495s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:29:15+08:00 ] 127.0.0.1 GET localhost/blog/contents
[运行时间：0.105849s] [吞吐率：9.45req/s] [内存消耗：2,802.95kb] [文件加载：54]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => NULL,
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
)
[ info ] [ RUN ] app\blog\controller\Contents->index[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\contents\contents.html [ array (
  0 => 'bloglist',
  1 => 'pagecount',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001791s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.049381s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 0,10 [ RunTime:0.001319s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT COUNT(*) AS tp_count FROM `think_blog` WHERE  `delete_time` IS NULL LIMIT 1 [ RunTime:0.000444s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000437s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_cate` [ RunTime:0.000744s ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000443s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000416s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.000750s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000680s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 2 [ RunTime:0.000517s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 6,
  'filtered' => 16.666667938232422,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000434s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000507s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 3 LIMIT 1 [ RunTime:0.000444s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 3 [ RunTime:0.000444s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 6,
  'filtered' => 16.666667938232422,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 4 LIMIT 1 [ RunTime:0.000390s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_cate` WHERE  `id` = 2 LIMIT 1 [ RunTime:0.000361s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_cate',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 4 LIMIT 1 [ RunTime:0.000356s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 4 [ RunTime:0.000380s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 6,
  'filtered' => 16.666667938232422,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:29:18+08:00 ] 127.0.0.1 GET localhost/blog/python/detail/id/4.html
[运行时间：0.036999s] [吞吐率：27.03req/s] [内存消耗：1,146.79kb] [文件加载：36]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'python',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '4',
)
[ info ] [ LOG ] INIT File
---------------------------------------------------------------
[ 2019-02-25T21:29:23+08:00 ] 127.0.0.1 GET localhost/blog/contents/detail/id/4.html
[运行时间：0.073279s] [吞吐率：13.65req/s] [内存消耗：2,786.32kb] [文件加载：53]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'blog',
    1 => 'contents',
    2 => 'detail',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/blog/contents',
  'accept' => 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'upgrade-insecure-requests' => '1',
  'connection' => 'keep-alive',
  'host' => 'localhost',
  'content-length' => '',
  'content-type' => '',
)
[ info ] [ PARAM ] array (
  'id' => '4',
)
[ info ] [ RUN ] app\blog\controller\Contents->detail[ D:\server\nginx\html\phpapp\application\blog\controller\Contents.php ]
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ DB ] INIT mysql
[ info ] [ VIEW ] D:\server\nginx\html/phpapp/application/blog\view\detail\detail.html [ array (
  0 => 'id',
  1 => 'username',
  2 => 'blogdetail',
  3 => 'blogcomments',
) ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001793s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001140s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 4 LIMIT 1 [ RunTime:0.000656s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blogs_tags` [ RunTime:0.001046s ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_tags` [ RunTime:0.000819s ]
[ sql ] [ SQL ] SELECT `think_tags`.*,pivot.id AS pivot__id,pivot.tag_id AS pivot__tag_id,pivot.blog_id AS pivot__blog_id,pivot.create_time AS pivot__create_time,pivot.update_time AS pivot__update_time,pivot.delete_time AS pivot__delete_time FROM `think_tags` INNER JOIN `think_blogs_tags` `pivot` ON `pivot`.`tag_id`=`think_tags`.`id` WHERE  `pivot`.`blog_id` = 4 [ RunTime:0.000584s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'pivot',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 6,
  'filtered' => 16.666667938232422,
  'extra' => 'Using where',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_comments` [ RunTime:0.000995s ]
[ sql ] [ SQL ] SELECT * FROM `think_comments` WHERE  `delete_time` IS NULL  AND `blog_id` = 4 [ RunTime:0.000523s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_comments',
  'partitions' => NULL,
  'type' => 'ALL',
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => 4,
  'filtered' => 25.0,
  'extra' => 'Using where',
) ]
---------------------------------------------------------------
[ 2019-02-25T21:30:34+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.147077s] [吞吐率：6.80req/s] [内存消耗：2,714.16kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '31977',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br><br><br>LazyMan<br><br>实现LazyMan（什么是LazyMan？请自行google）<br><br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001523s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.020379s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000549s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000765s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000490s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000835s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000493s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>javascript<br><br><br>LazyMan<br><br>实现LazyMan（什么是LazyMan？请自行google）<br><br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1[\"age\"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',`blog_text`='javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1[\"age\"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',`update_time`=1551101434  WHERE  `id` = 1 [ RunTime:0.083550s ]
---------------------------------------------------------------
[ 2019-02-25T21:30:37+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.060508s] [吞吐率：16.53req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '31977',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br><br><br>LazyMan<br><br>实现LazyMan（什么是LazyMan？请自行google）<br><br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001017s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000831s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000515s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000792s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000514s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000799s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.022223s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:30:38+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.052681s] [吞吐率：18.98req/s] [内存消耗：2,697.39kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '31969',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br><br>LazyMan<br><br>实现LazyMan（什么是LazyMan？请自行google）<br><br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001048s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000923s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000440s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000845s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000448s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000900s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000683s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>javascript<br><br>LazyMan<br><br>实现LazyMan（什么是LazyMan？请自行google）<br><br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1[\"age\"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',`update_time`=1551101438  WHERE  `id` = 1 [ RunTime:0.010309s ]
---------------------------------------------------------------
[ 2019-02-25T21:30:39+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.065277s] [吞吐率：15.32req/s] [内存消耗：2,697.39kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '31961',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br><br>实现LazyMan（什么是LazyMan？请自行google）<br><br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001161s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.016572s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000518s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000774s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000512s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000865s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000643s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>javascript<br>LazyMan<br><br>实现LazyMan（什么是LazyMan？请自行google）<br><br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1[\"age\"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',`update_time`=1551101439  WHERE  `id` = 1 [ RunTime:0.007342s ]
---------------------------------------------------------------
[ 2019-02-25T21:30:39+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.082166s] [吞吐率：12.17req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '31961',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br><br>实现LazyMan（什么是LazyMan？请自行google）<br><br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001072s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.045866s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000533s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000784s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000511s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000852s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000650s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:30:40+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.128064s] [吞吐率：7.81req/s] [内存消耗：2,697.39kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '31953',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.021170s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001746s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000531s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000805s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000512s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000875s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000642s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1[\"age\"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',`update_time`=1551101440  WHERE  `id` = 1 [ RunTime:0.067436s ]
---------------------------------------------------------------
[ 2019-02-25T21:30:41+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.038238s] [吞吐率：26.15req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '31953',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001579s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001228s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000530s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000772s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000501s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000818s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000658s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:30:41+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.071205s] [吞吐率：14.04req/s] [内存消耗：2,697.39kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '31945',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001837s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000979s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.020875s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000815s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000444s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000900s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000757s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1[\"age\"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',`update_time`=1551101441  WHERE  `id` = 1 [ RunTime:0.005716s ]
---------------------------------------------------------------
[ 2019-02-25T21:30:42+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.037713s] [吞吐率：26.52req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '31945',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001599s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001221s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000527s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000719s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000510s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000815s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000640s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:30:44+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.041427s] [吞吐率：24.14req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '31945',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001590s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001335s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000521s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000849s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000518s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000925s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000662s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:30:46+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.045713s] [吞吐率：21.88req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '31945',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001551s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001465s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000518s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000979s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000480s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000905s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000587s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:30:46+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.045136s] [吞吐率：22.16req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '31945',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br>function _LazyMan(_name) {<br>    var _this = this;<br>    _this.tasks = [];<br>    _this.tasks.push(function() {<br>        console.log(\'Hi! This is \' + _name + \'!\');<br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001664s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000866s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000515s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000852s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000514s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001468s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000643s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:30:49+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.045827s] [吞吐率：21.82req/s] [内存消耗：2,697.39kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '31936',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001597s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001228s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000525s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000768s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000510s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000805s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000636s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name) {    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1[\"age\"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',`update_time`=1551101449  WHERE  `id` = 1 [ RunTime:0.005488s ]
---------------------------------------------------------------
[ 2019-02-25T21:30:49+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.047052s] [吞吐率：21.25req/s] [内存消耗：2,734.07kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '31994',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001640s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000816s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000518s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000772s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000512s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000817s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000650s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1[\"age\"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',`blog_text`='javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1[\"age\"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',`update_time`=1551101449  WHERE  `id` = 1 [ RunTime:0.006616s ]
---------------------------------------------------------------
[ 2019-02-25T21:30:51+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.038059s] [吞吐率：26.27req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '31994',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];    _this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001017s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001824s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000533s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000769s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000505s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000854s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000622s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:30:52+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.046640s] [吞吐率：21.44req/s] [内存消耗：2,734.07kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32066',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001587s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001395s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000520s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000786s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000510s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000812s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000658s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1[\"age\"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',`blog_text`='javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1[\"age\"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',`update_time`=1551101452  WHERE  `id` = 1 [ RunTime:0.005186s ]
---------------------------------------------------------------
[ 2019-02-25T21:30:53+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.083552s] [吞吐率：11.97req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32066',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.026265s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.016105s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.005651s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000857s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000485s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000892s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000637s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:30:54+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.038930s] [吞吐率：25.69req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32066',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function() {        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001564s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000866s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000519s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000763s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000510s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000821s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000639s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:30:55+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.046064s] [吞吐率：21.71req/s] [内存消耗：2,734.07kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32124',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001030s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001454s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000534s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000780s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000477s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000923s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000651s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1[\"age\"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',`blog_text`='javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1[\"age\"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',`update_time`=1551101455  WHERE  `id` = 1 [ RunTime:0.004802s ]
---------------------------------------------------------------
[ 2019-02-25T21:30:57+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.069522s] [吞吐率：14.38req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32124',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001045s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.031524s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000526s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000776s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000507s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000828s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000662s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:30:58+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.043697s] [吞吐率：22.88req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32124',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001122s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001406s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000534s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001239s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000530s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001108s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000682s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:30:59+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.045104s] [吞吐率：22.17req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32124',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        _this.next();<br>    });<br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001313s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001070s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000540s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001041s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000539s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000883s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000588s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:31:01+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.045356s] [吞吐率：22.05req/s] [内存消耗：2,697.39kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32139',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001100s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001411s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000535s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000759s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000509s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000843s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000654s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1[\"age\"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',`update_time`=1551101461  WHERE  `id` = 1 [ RunTime:0.004203s ]
---------------------------------------------------------------
[ 2019-02-25T21:31:01+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.039786s] [吞吐率：25.13req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32139',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    setTimeout(function() {<br>        _this.next();<br>    }, 0);<br>}<br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001029s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000818s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000765s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000807s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000514s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000989s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000674s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:31:04+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.097269s] [吞吐率：10.28req/s] [内存消耗：2,697.39kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32138',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function() {        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function() {        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001030s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.053605s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000550s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000930s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000416s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000873s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000666s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function() {        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1[\"age\"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',`update_time`=1551101464  WHERE  `id` = 1 [ RunTime:0.003766s ]
---------------------------------------------------------------
[ 2019-02-25T21:31:04+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.049281s] [吞吐率：20.29req/s] [内存消耗：2,734.07kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32196',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function()&nbsp;</code></p><p><code>{        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function()&nbsp;{        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000993s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000792s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000459s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000829s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000424s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000881s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000585s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function()&nbsp;</code></p><p><code>{        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1[\"age\"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',`blog_text`='javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function()&nbsp;{        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1[\"age\"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',`update_time`=1551101464  WHERE  `id` = 1 [ RunTime:0.004753s ]
---------------------------------------------------------------
[ 2019-02-25T21:31:05+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.060373s] [吞吐率：16.56req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32196',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function()&nbsp;</code></p><p><code>{        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function()&nbsp;{        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001015s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.024032s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000535s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000766s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000504s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000815s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000664s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:31:06+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.037006s] [吞吐率：27.02req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32196',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function()&nbsp;</code></p><p><code>{        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function()&nbsp;{        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001014s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000826s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000487s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000767s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000525s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000811s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000643s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:31:08+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.040327s] [吞吐率：24.80req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32196',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function()&nbsp;</code></p><p><code>{        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function()&nbsp;{        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001041s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001393s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000534s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000815s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000527s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000903s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000660s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:31:08+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.040398s] [吞吐率：24.75req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32196',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function()&nbsp;</code></p><p><code>{        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br>_LazyMan.prototype.next = function() {<br>    var _fn = this.tasks.shift();<br>    _fn &amp;&amp; _fn();<br>}<br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function()&nbsp;{        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001048s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001802s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000530s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000903s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000530s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.001084s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000691s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:31:12+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.079030s] [吞吐率：12.65req/s] [内存消耗：2,697.39kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32195',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function()&nbsp;</code></p><p><code>{        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br><code>_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}</code><br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function()&nbsp;{        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.002405s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.002659s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000980s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001019s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000538s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000974s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000675s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function()&nbsp;</code></p><p><code>{        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br><code>_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}</code><br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1[\"age\"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',`update_time`=1551101472  WHERE  `id` = 1 [ RunTime:0.005732s ]
---------------------------------------------------------------
[ 2019-02-25T21:31:12+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.079297s] [吞吐率：12.61req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32195',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function()&nbsp;</code></p><p><code>{        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br><code>_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}</code><br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function()&nbsp;{        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001454s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001420s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.002133s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.001090s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000546s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.004250s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000725s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:31:14+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.039832s] [吞吐率：25.11req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32195',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function()&nbsp;</code></p><p><code>{        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br><code>_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}</code><br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function()&nbsp;{        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001037s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001237s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.001304s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000744s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000515s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000871s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000653s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:31:14+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.050148s] [吞吐率：19.94req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32195',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function()&nbsp;</code></p><p><code>{        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br><code>_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}</code><br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.sleepFirst = function(_time) {<br>    var _this = this;<br>    _this.tasks.unshift(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<br>_LazyMan.prototype.eat = function(_eat) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        console.log(\'Eat \' + _eat);<br>        _this.next();<br>    });<br>    return _this;<br>}<br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function()&nbsp;{        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.001893s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.001109s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000464s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000857s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000442s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000888s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000712s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
---------------------------------------------------------------
[ 2019-02-25T21:31:18+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.075268s] [吞吐率：13.29req/s] [内存消耗：2,697.39kb] [文件加载：52]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32074',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function()&nbsp;</code></p><p><code>{        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br><code>_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}</code><br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<code>_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}</code><br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function()&nbsp;{        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ CACHE ] INIT File
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.000997s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.028957s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000516s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000936s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000513s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000883s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000589s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] UPDATE `think_blog`  SET `blog_html`='<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function()&nbsp;</code></p><p><code>{        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br><code>_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}</code><br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<code>_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}</code><br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1[\"age\"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',`update_time`=1551101478  WHERE  `id` = 1 [ RunTime:0.004495s ]
---------------------------------------------------------------
[ 2019-02-25T21:31:22+08:00 ] 127.0.0.1 POST localhost/admin/blog/editblog
[运行时间：0.063025s] [吞吐率：15.87req/s] [内存消耗：2,669.66kb] [文件加载：49]
[ info ] [ LANG ] D:\server\nginx\html\phpapp\thinkphp\lang\zh-cn.php
[ info ] [ ROUTE ] array (
  'type' => 'module',
  'module' => 
  array (
    0 => 'admin',
    1 => 'blog',
    2 => 'editblog',
  ),
)
[ info ] [ HEADER ] array (
  'cookie' => 'thinkphp_show_page_trace=0|0; PHPSESSID=c78pdmksj9193t64k0lpv39vcn',
  'accept-language' => 'zh-CN,zh;q=0.9',
  'accept-encoding' => 'gzip, deflate, br',
  'referer' => 'http://localhost/admin',
  'content-type' => 'application/x-www-form-urlencoded; charset=UTF-8',
  'user-agent' => 'Mozilla/5.0 (Windows NT 6.3; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/70.0.3538.102 Safari/537.36',
  'x-requested-with' => 'XMLHttpRequest',
  'origin' => 'http://localhost',
  'accept' => 'application/json, text/javascript, */*; q=0.01',
  'content-length' => '32074',
  'connection' => 'keep-alive',
  'host' => 'localhost',
)
[ info ] [ PARAM ] array (
  'blogdata' => 
  array (
    'id' => '1',
    'blog_title' => '',
    'cate_id' => '2',
    'blog_html' => '<p>javascript<br>LazyMan<br>实现LazyMan（什么是LazyMan？请自行google）<br><code>function _LazyMan(_name)&nbsp;</code></p><p><code>{    var _this = this;    _this.tasks = [];&nbsp;</code></p><p><code>&nbsp;_this.tasks.push(function()&nbsp;</code></p><p><code>{        console.log(\'Hi! This is \' + _name + \'!\');</code><br>        // 这里的this是window，所以要缓存this<br>        <code>_this.next();    });</code><br>    <code>setTimeout(function()&nbsp;</code></p><p><code>{        _this.next();    }, 0);}</code><br><br>// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向<br><code>_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}</code><br>_LazyMan.prototype.sleep = function(_time) {<br>    var _this = this;<br>    _this.tasks.push(function() {<br>        setTimeout(function() {<br>            console.log(\'Wake up after \' + _time);<br>            _this.next();<br>        }, _time);<br>    });<br>    return _this;<br>}<code>_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}</code><br><br>// 封装对象<br>var LazyMan = function(_name) {<br>    return new _LazyMan(_name);<br>}<br><br><br><br>数据类型<br><br>6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）<br><br>Null(只有一个值： null)<br>Undefined(一个没有被赋值的变量会有个默认值 undefined)<br>Number<br>Boolean(两个值：true 和 false)<br>String<br>Symbol<br><br><br>和Object(对象指内存中的可以被标识符引用的一块区域)<br><br><br><br>数据类型检测<br><br>typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)<br><br>undefined - Undefined类型<br>number - Number类型<br>boolean - Boolean类型<br>string - String类型<br>symbol - Symbol类型(ECMAScript6新增)<br>function - 函数对象([[Call]]在ECMA-262条款中实现了)<br>object - 引用类型 或 Null类型<br><br><br><br>typeof(Function) // function (Function是函数对象)<br>typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})<br>typeof(Array) // function (Array是函数对象)<br>typeof(new Array) // object（实例化的Array就是object）<br><br><br><br>变量赋值时候的返回值：<br>var name = 123; // 返回undefined<br>name = 456; // 返回456<br><br><br>结语：定义变量的时候赋值返回:undefined<br>给已声明变量赋值时候返回当前赋值。<br><br><br><br>获取元素距离页面的top、left<br>function getRec(ele) {<br>    var _t = document.documentElement.clientTop,<br>        _l = document.documentElement.clientLeft,<br>        rect = ele.getBoundingClientRect();<br>    return {<br>        top: rect.top - _t,<br>        right: rect.right - _l,<br>        bottom: rect.bottom - _t,<br>        left: rect.left - _l<br>    }<br>}<br><br><br>注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。<br><br><br><br>数字的固定小数位数<br>var a=8.88888,<br>    b=8;<br>console.log(a.toFixed(2)); // 8.89 或者 8.88<br>console.log(b.toFixed(2)); // 8.00<br><br><br><br>js是编译语言，数组长度是随时程序变化而变化的<br>var arr = [0, 1];<br>arr[3] = 3;<br>console.log(arr[2]); // undefined<br>console.log(arr.length); // 4<br><br><br><br>矩阵的转置<br>var arr = [ // 定义一个矩阵（二维数据）<br>    [1, 2, 3, 4],<br>    [5, 6, 6, 6],<br>    [7, 6, 7, 8],<br>    [8, 5, 3, 3]<br>];<br><br>function changeArr(arr) { // 矩阵转置函数<br>    var c;<br>    for (var i = 1; i &lt; arr.length; i++) {<br>        for (var j = 0; j &lt; i; j++) {<br>            c = arr[i][j];<br>            arr[i][j] = arr[j][i];<br>            arr[j][i] = c;<br>        }<br>    }<br>}<br>changeArr(arr);<br>console.table(arr);<br><br><br><br>冒泡排序方法<br>// 第一轮是对n-1的位置定位<br>// 第二轮是 每一个位置的数的 确定<br>var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],<br>    temp = 0,<br>    flag = false;<br>for (var i = 0; i &lt; arr.length - 1; i++) {<br>    document.writeln(\'come\');<br>    for (var j = 0; j &lt; arr.length - 1 - i; j++) {<br>        if (arr[j] &gt; arr[j + 1]) {<br>            temp = arr[j];<br>            arr[j] = arr[j + 1];<br>            arr[j + 1] = temp;<br>            flag = true;<br>        }<br>    }<br>    if (flag) {<br>        flag = false;<br>    } else {<br>        break;<br>    }<br>}<br>for (var i = 0; i &lt; arr.length; i++) {<br>    document.writeln(arr[i]);<br>};<br><br><br><br><br><br>二分查找<br>var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];<br><br>function twoFind(arr, wantVal, leftIndex, rightIndex) {<br>    if (leftIndex &gt; rightIndex) {<br>        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');<br>        return;<br>    }<br>    var minIndex = Math.floor((leftIndex + rightIndex) / 2);<br>    if (arr[minIndex] &gt; wantVal) {<br>        twoFind(arr, wantVal, leftIndex, minIndex - 1);<br>    } else if (arr[minIndex] &lt; wantVal) {<br>        twoFind(arr, wantVal, minIndex + 1, rightIndex);<br>    } else {<br>        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);<br>    }<br>}<br>twoFind(arr, 9, 0, arr.length - 1);<br><br><br><br>js对象访问属性的二种方式<br>function Person () {};<br>var new1 = new Person ();<br>new1.name=\'冯杰\';<br>new1.age=21;<br>window.alert(new1.name);<br>window.alert(new1["age"]);<br><br><br><br><br><br>js之delete只能删除对象的属性<br>function Person () {};<br>var me = new Person();<br>me.name=\'冯杰\';<br>console.log(me.name);<br>delete me.name;<br>console.log(me.name);<br><br><br><br>在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈<br>// js 中 一切类 继承自 Object 而Object 有propotype<br>// 下面是解决办法 prototype 获得类的static性质<br>function God() {}<br>God.prototype.shout = function() {<br>    window.alert(\'小狗叫\');<br>}<br>var dog1 = new God();<br>var dog2 = new God();<br>dog1.shout();<br>dog2.shout();<br><br><br><br>对象<br>// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类<br>// Object 类是所有js类的基类 Object 就表示对象（一切的对象）<br>var p1 = new Object();<br>p1.name = \'fj\';<br>window.alert(p1.name);<br>window.alert(p1.constructor);<br><br>// 原型链上新增默认对象方法<br>var num = new Number(1);<br>var num2 = 10;<br>window.alert(num.constructor);<br>window.alert(num2.constructor);<br>// 上面2个弹出是一样的<br>Number.prototype.add = function(a) { //prototype是属于类的<br>    return this + a;<br>}<br>window.alert(num.add(1).add(2));<br><br>// 小实验 为Array 添加 find(val) 方法<br>Array.prototype.find = function(a) {<br>    for (var i = 0; i &lt; this.length; i++) {<br>        if (this[i] == a) {<br>            return i;<br>        }<br>    }<br>    return \'find fail.\';<br>}<br>var arr = [0, 1, 2, 77, 4, 5];<br>window.alert(arr.find(77));<br><br><br><br>arguments<br>function abc() {<br>    var sum = 0;<br>    for (var i = 0; i &lt; arguments.length; i++) {<br>        sum += arguments[i];<br>    }<br>    return sum;<br>}<br>window.alert(abc(1, 2, 3));<br><br><br><br>call函数目的就是改变对象的this指向<br>var Person = {<br>    name: \'fjj\'<br>};<br><br>function test() {<br>    window.alert(this.name);<br>}<br>test.call(Person);<br><br><br><br>体会js的封装<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21; //共有<br>}<br>var p1 = new Person();<br>window.alert(p1.name); //undefined<br>window.alert(p1.age); //21<br><br><br><br>prototype的方法不能访问私有属性和方法<br>function Person() {<br>    var name = \'fj\'; //私有<br>    this.age = 21;<br>}<br>Person.prototype.showName = function() {<br>    window.alert(this.name);<br>}<br>Person.prototype.showAge = function() {<br>    window.alert(this.age);<br>}<br>var p1 = new Person();<br>p1.showName();<br>p1.showAge();<br><br><br><br>继承<br>// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字<br>function Father(name, age) {<br>    this.name = name;<br>    this.age = age;<br>    this.show = function() {<br>        window.alert(this.name + \'---\' + this.age);<br>    }<br>}<br><br>function Son(name, age) {<br>    this.Father = Father;<br>    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间<br>}<br>var me = new Son(\'fj\', 21);<br>window.alert(me.name);<br>me.show();<br><br><br><br>重载<br><br>// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理<br><br><br><br>闭包<br>// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的<br><br>数组长度<br><br>// 数组的长度是根据下标的最大而确定的<br>var arr = new Array();<br>arr[\'a\'] = 1;<br>arr[\'b\'] = 2;<br>window.alert(arr.length); // 打出0<br></p>',
    'blog_text' => 'javascriptLazyMan实现LazyMan（什么是LazyMan？请自行google）function _LazyMan(_name)&nbsp;{    var _this = this;    _this.tasks = [];&nbsp;&nbsp;_this.tasks.push(function()&nbsp;{        console.log(\'Hi! This is \' + _name + \'!\');        // 这里的this是window，所以要缓存this        _this.next();    });    setTimeout(function()&nbsp;{        _this.next();    }, 0);}// push函数里面的this和setTimeout函数里面的this都指向全局作用域，所以要缓存当前this指向_LazyMan.prototype.next = function() {    var _fn = this.tasks.shift();    _fn &amp;&amp; _fn();}_LazyMan.prototype.sleep = function(_time) {    var _this = this;    _this.tasks.push(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.sleepFirst = function(_time) {    var _this = this;    _this.tasks.unshift(function() {        setTimeout(function() {            console.log(\'Wake up after \' + _time);            _this.next();        }, _time);    });    return _this;}_LazyMan.prototype.eat = function(_eat) {    var _this = this;    _this.tasks.push(function() {        console.log(\'Eat \' + _eat);        _this.next();    });    return _this;}// 封装对象var LazyMan = function(_name) {    return new _LazyMan(_name);}数据类型6种原始值（不可变。“除非重置当前变量，否则不能改变元素值。”）Null(只有一个值： null)Undefined(一个没有被赋值的变量会有个默认值 undefined)NumberBoolean(两个值：true 和 false)StringSymbol和Object(对象指内存中的可以被标识符引用的一块区域)数据类型检测typeof(对变量或值调用 typeof 运算符将返回(字符串)下列值之一)undefined - Undefined类型number - Number类型boolean - Boolean类型string - String类型symbol - Symbol类型(ECMAScript6新增)function - 函数对象([[Call]]在ECMA-262条款中实现了)object - 引用类型 或 Null类型typeof(Function) // function (Function是函数对象)typeof(new Function) // function (new Function也是是函数对象，同等：var func = function(){})typeof(Array) // function (Array是函数对象)typeof(new Array) // object（实例化的Array就是object）变量赋值时候的返回值：var name = 123; // 返回undefinedname = 456; // 返回456结语：定义变量的时候赋值返回:undefined给已声明变量赋值时候返回当前赋值。获取元素距离页面的top、leftfunction getRec(ele) {    var _t = document.documentElement.clientTop,        _l = document.documentElement.clientLeft,        rect = ele.getBoundingClientRect();    return {        top: rect.top - _t,        right: rect.right - _l,        bottom: rect.bottom - _t,        left: rect.left - _l    }}注意：IE、Firefox3+、Opera9.5、Chrome、Safari支持，在IE中，默认坐标从(2,2)开始计算，导致最终距离比其他浏览器多出两个像素，我们需要做个兼容。数字的固定小数位数var a=8.88888,    b=8;console.log(a.toFixed(2)); // 8.89 或者 8.88console.log(b.toFixed(2)); // 8.00js是编译语言，数组长度是随时程序变化而变化的var arr = [0, 1];arr[3] = 3;console.log(arr[2]); // undefinedconsole.log(arr.length); // 4矩阵的转置var arr = [ // 定义一个矩阵（二维数据）    [1, 2, 3, 4],    [5, 6, 6, 6],    [7, 6, 7, 8],    [8, 5, 3, 3]];function changeArr(arr) { // 矩阵转置函数    var c;    for (var i = 1; i &lt; arr.length; i++) {        for (var j = 0; j &lt; i; j++) {            c = arr[i][j];            arr[i][j] = arr[j][i];            arr[j][i] = c;        }    }}changeArr(arr);console.table(arr);冒泡排序方法// 第一轮是对n-1的位置定位// 第二轮是 每一个位置的数的 确定var arr = [1, 4, 5, 6, 99, 111, 112, 113, 133],    temp = 0,    flag = false;for (var i = 0; i &lt; arr.length - 1; i++) {    document.writeln(\'come\');    for (var j = 0; j &lt; arr.length - 1 - i; j++) {        if (arr[j] &gt; arr[j + 1]) {            temp = arr[j];            arr[j] = arr[j + 1];            arr[j + 1] = temp;            flag = true;        }    }    if (flag) {        flag = false;    } else {        break;    }}for (var i = 0; i &lt; arr.length; i++) {    document.writeln(arr[i]);};二分查找var arr = [41, 55, 76, 87, 88, 99, 123, 432, 546, 577, 688, 786];function twoFind(arr, wantVal, leftIndex, rightIndex) {    if (leftIndex &gt; rightIndex) {        document.writeln(\'SORRY: 找不到 \' + wantVal + \' ！\');        return;    }    var minIndex = Math.floor((leftIndex + rightIndex) / 2);    if (arr[minIndex] &gt; wantVal) {        twoFind(arr, wantVal, leftIndex, minIndex - 1);    } else if (arr[minIndex] &lt; wantVal) {        twoFind(arr, wantVal, minIndex + 1, rightIndex);    } else {        document.writeln(\'找到了 \' + wantVal + \' ,下表为\' + minIndex);    }}twoFind(arr, 9, 0, arr.length - 1);js对象访问属性的二种方式function Person () {};var new1 = new Person ();new1.name=\'冯杰\';new1.age=21;window.alert(new1.name);window.alert(new1["age"]);js之delete只能删除对象的属性function Person () {};var me = new Person();me.name=\'冯杰\';console.log(me.name);delete me.name;console.log(me.name);在js中对象的方法不是通用的，如果生成n个对象，那么就有n个内存堆栈// js 中 一切类 继承自 Object 而Object 有propotype// 下面是解决办法 prototype 获得类的static性质function God() {}God.prototype.shout = function() {    window.alert(\'小狗叫\');}var dog1 = new God();var dog2 = new God();dog1.shout();dog2.shout();对象// js里要想创建对象 除了一般的创建方式 还有 通过Object 方式创建类// Object 类是所有js类的基类 Object 就表示对象（一切的对象）var p1 = new Object();p1.name = \'fj\';window.alert(p1.name);window.alert(p1.constructor);// 原型链上新增默认对象方法var num = new Number(1);var num2 = 10;window.alert(num.constructor);window.alert(num2.constructor);// 上面2个弹出是一样的Number.prototype.add = function(a) { //prototype是属于类的    return this + a;}window.alert(num.add(1).add(2));// 小实验 为Array 添加 find(val) 方法Array.prototype.find = function(a) {    for (var i = 0; i &lt; this.length; i++) {        if (this[i] == a) {            return i;        }    }    return \'find fail.\';}var arr = [0, 1, 2, 77, 4, 5];window.alert(arr.find(77));argumentsfunction abc() {    var sum = 0;    for (var i = 0; i &lt; arguments.length; i++) {        sum += arguments[i];    }    return sum;}window.alert(abc(1, 2, 3));call函数目的就是改变对象的this指向var Person = {    name: \'fjj\'};function test() {    window.alert(this.name);}test.call(Person);体会js的封装function Person() {    var name = \'fj\'; //私有    this.age = 21; //共有}var p1 = new Person();window.alert(p1.name); //undefinedwindow.alert(p1.age); //21prototype的方法不能访问私有属性和方法function Person() {    var name = \'fj\'; //私有    this.age = 21;}Person.prototype.showName = function() {    window.alert(this.name);}Person.prototype.showAge = function() {    window.alert(this.age);}var p1 = new Person();p1.showName();p1.showAge();继承// js 里面是对象冒充来继承的 不算是真正的继承 通过对象冒充 js可以实现多重继承和继承的效果 但是没有Extends关键字function Father(name, age) {    this.name = name;    this.age = age;    this.show = function() {        window.alert(this.name + \'---\' + this.age);    }}function Son(name, age) {    this.Father = Father;    this.Father(name, age); //通过对象冒充 实现继承 这一句非常重要 js是动态语言 不是编译语言 要执行才会分配空间}var me = new Son(\'fj\', 21);window.alert(me.name);me.show();重载// js从常理来说是不支持重载的 但是又可以说是天然支持重载 因为js天然支持可变参数 而且我们可以通过arguments[]数组的长度判断 而做出相应的处理闭包// 闭包实际上设计一个对象的属性，何时被gc处理的问题 闭包和gc是相关联的数组长度// 数组的长度是根据下标的最大而确定的var arr = new Array();arr[\'a\'] = 1;arr[\'b\'] = 2;window.alert(arr.length); // 打出0',
  ),
  'tagdata' => 
  array (
    0 => '2',
    1 => '3',
  ),
)
[ info ] [ DB ] INIT mysql
[ info ] [ SESSION ] INIT array (
  'id' => '',
  'var_session_id' => '',
  'prefix' => 'think',
  'type' => '',
  'auto_start' => true,
)
[ info ] [ RUN ] app\admin\controller\Blog->editblog[ D:\server\nginx\html\phpapp\application\admin\controller\Blog.php ]
[ info ] [ LOG ] INIT File
[ sql ] [ DB ] CONNECT:[ UseTime:0.027056s ] mysql:host=127.0.0.1;port=3306;dbname=tp;charset=utf8
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_web` [ RunTime:0.000843s ]
[ sql ] [ SQL ] SELECT * FROM `think_web` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000489s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_web',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_auth_group_access` [ RunTime:0.000756s ]
[ sql ] [ SQL ] SELECT `AuthGroupAccess`.`uid`,`AuthGroupAccess`.`group_id`,`AuthGroup`.`title`,`AuthGroup`.`rules` FROM `think_auth_group_access` `AuthGroupAccess` LEFT JOIN `think_auth_group` `AuthGroup` ON `AuthGroupAccess`.`group_id`=`AuthGroup`.`id` WHERE  (  AuthGroupAccess.uid='2' and AuthGroup.status='1' ) [ RunTime:0.000510s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => NULL,
  'partitions' => NULL,
  'type' => NULL,
  'possible_keys' => NULL,
  'key' => NULL,
  'key_len' => NULL,
  'ref' => NULL,
  'rows' => NULL,
  'filtered' => NULL,
  'extra' => 'Impossible WHERE noticed after reading const tables',
) ]
[ sql ] [ SQL ] SHOW COLUMNS FROM `think_blog` [ RunTime:0.000812s ]
[ sql ] [ SQL ] SELECT * FROM `think_blog` WHERE  `id` = 1 LIMIT 1 [ RunTime:0.000642s ]
[ sql ] [ EXPLAIN : array (
  'id' => 1,
  'select_type' => 'SIMPLE',
  'table' => 'think_blog',
  'partitions' => NULL,
  'type' => 'const',
  'possible_keys' => 'PRIMARY',
  'key' => 'PRIMARY',
  'key_len' => '4',
  'ref' => 'const',
  'rows' => 1,
  'filtered' => 100.0,
  'extra' => NULL,
) ]
